<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/3.3.1" created="2012-04-17 10:51" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.1/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.1/"
>

<channel>
	<title>i4 apps</title>
	<link>http://www.i4-apps.com</link>
	<description>Learning the ropes….</description>
	<pubDate>Tue, 17 Apr 2012 10:51:32 +0000</pubDate>
	<language>en</language>
	<wp:wxr_version>1.1</wp:wxr_version>
	<wp:base_site_url>http://www.i4-apps.com</wp:base_site_url>
	<wp:base_blog_url>http://www.i4-apps.com</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>admin</wp:author_login><wp:author_email>dave@i4-apps.com</wp:author_email><wp:author_display_name><![CDATA[David Barton]]></wp:author_display_name><wp:author_first_name><![CDATA[David]]></wp:author_first_name><wp:author_last_name><![CDATA[Barton]]></wp:author_last_name></wp:author>

	<wp:category><wp:term_id>5</wp:term_id><wp:category_nicename>all-assignments</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[All assignments]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>27</wp:term_id><wp:category_nicename>general-ios</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[General iOS]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>1</wp:term_id><wp:category_nicename>uncategorized</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name></wp:category>
	<wp:tag><wp:term_id>30</wp:term_id><wp:tag_slug>5-1</wp:tag_slug><wp:tag_name><![CDATA[5.1]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>12</wp:term_id><wp:tag_slug>assignment-1</wp:tag_slug><wp:tag_name><![CDATA[assignment 1]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>15</wp:term_id><wp:tag_slug>assignment-2</wp:tag_slug><wp:tag_name><![CDATA[assignment 2]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>19</wp:term_id><wp:tag_slug>assignment-3</wp:tag_slug><wp:tag_name><![CDATA[assignment 3]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>32</wp:term_id><wp:tag_slug>bar-button-item</wp:tag_slug><wp:tag_name><![CDATA[bar button item]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>17</wp:term_id><wp:tag_slug>calculator</wp:tag_slug><wp:tag_name><![CDATA[calculator]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>8</wp:term_id><wp:tag_slug>cs193p</wp:tag_slug><wp:tag_name><![CDATA[CS193p]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>10</wp:term_id><wp:tag_slug>fall-2011</wp:tag_slug><wp:tag_name><![CDATA[fall 2011]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>18</wp:term_id><wp:tag_slug>graphing-calculator</wp:tag_slug><wp:tag_name><![CDATA[graphing calculator]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>22</wp:term_id><wp:tag_slug>infinity</wp:tag_slug><wp:tag_name><![CDATA[INFINITY]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>26</wp:term_id><wp:tag_slug>ios</wp:tag_slug><wp:tag_name><![CDATA[iOS]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>33</wp:term_id><wp:tag_slug>ios-5-1</wp:tag_slug><wp:tag_name><![CDATA[iOS 5.1]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>24</wp:term_id><wp:tag_slug>isinf</wp:tag_slug><wp:tag_name><![CDATA[isinf]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>23</wp:term_id><wp:tag_slug>isnan</wp:tag_slug><wp:tag_name><![CDATA[isnan]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>21</wp:term_id><wp:tag_slug>nan</wp:tag_slug><wp:tag_name><![CDATA[NAN]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>25</wp:term_id><wp:tag_slug>objective-c</wp:tag_slug><wp:tag_name><![CDATA[objective c]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>29</wp:term_id><wp:tag_slug>popovers</wp:tag_slug><wp:tag_name><![CDATA[popovers]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>13</wp:term_id><wp:tag_slug>rpn-calculator</wp:tag_slug><wp:tag_name><![CDATA[RPN calculator]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>9</wp:term_id><wp:tag_slug>stanford-university</wp:tag_slug><wp:tag_name><![CDATA[stanford university]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>31</wp:term_id><wp:tag_slug>uisplitviewcontroller</wp:tag_slug><wp:tag_name><![CDATA[UISplitViewController]]></wp:tag_name></wp:tag>

	<generator>http://wordpress.org/?v=3.3.1</generator>

	<item>
		<title>About</title>
		<link>http://www.i4-apps.com/about-me/</link>
		<pubDate>Wed, 07 Mar 2012 14:45:28 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://i4-apps.com/?page_id=51</guid>
		<description></description>
		<content:encoded><![CDATA[<p style="text-align: justify;">Hello there, my name is David Barton and I am a software designer, developer and wannabe idler.</p>
I have been working professionally in software for around fifteen years, working mainly at corporates building enterprise solutions based on Oracle database and Java. At the moment, I'm taking a little time off to rest, explore iOS and learn some new tricks.

I am married, have two children and live in Bath in the UK. ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>51</wp:post_id>
		<wp:post_date>2012-03-07 14:45:28</wp:post_date>
		<wp:post_date_gmt>2012-03-07 14:45:28</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>about-me</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>20</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>s2mail</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CS193p solutions</title>
		<link>http://www.i4-apps.com/cs193p-solutions/</link>
		<pubDate>Wed, 07 Mar 2012 14:53:54 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://i4-apps.com/?page_id=57</guid>
		<description></description>
		<content:encoded><![CDATA[When I started to learn iOS towards the end of February, I was fortunate to come across the Stanford University <a title="iPad and iPhone Application Development (HD) by Paul Hegarty (Fall 2011)" href="http://itunes.apple.com/itunes-u/ipad-iphone-application-development/id473757255" target="_blank">CS193p lectures</a> taught by Paul Hegarty and available through iTunes U. 

I've fancied having a go at blogging, and posting my solution to the CS193p assignments gives me a great excuse. Any questions, comments or improvements to my solutions are happily received.

The assignments and lecture presentations are all available for download from the <a title="CS 193P iPhone Application Development, Stanford University" href="http://www.stanford.edu/class/cs193p/cgi-bin/drupal/" target="_blank">CS193p homepage </a> at Stanford University. The solutions posted are based on the Fall 2011 course.

<a href="http://www.i4-apps.com/assignment-1/" title="Assignment 1">Assignment 1: required tasks</a>
<a href="http://www.i4-apps.com/assignment-1-extra-credit/" title="Assignment 1:extra credit">Assignment 1: extra credit</a>
<a href="http://www.i4-apps.com/assignment-2-task1/" title="Assignment 2: task1">Assignment 2: task1</a>
<a href="http://www.i4-apps.com/assignment-2-task2/" title="Assignment 2: task2">Assignment 2: task2</a>
<a href="http://www.i4-apps.com/assignment-2-completion/" title="Assignment 2: task2">Assignment 2: completion</a>
<a href="http://www.i4-apps.com/assignment-3-required-tasks/" title="Assignment 3: required tasks">Assignment 3: required tasks</a>
<a href="http://www.i4-apps.com/assignment-3-extra-credit/" title="Assignment 3: extra credit">Assignment 3: extra credit</a>
</br>
Enjoy!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>57</wp:post_id>
		<wp:post_date>2012-03-07 14:53:54</wp:post_date>
		<wp:post_date_gmt>2012-03-07 14:53:54</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>cs193p-solutions</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>10</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>s2mail</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Assignment 1: required tasks</title>
		<link>http://www.i4-apps.com/assignment-1/</link>
		<pubDate>Wed, 07 Mar 2012 17:18:37 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://i4-apps.com/?p=76</guid>
		<description></description>
		<content:encoded><![CDATA[This post details my solution for the Required Tasks of the first assignment of the <a href="http://www.stanford.edu/class/cs193p/cgi-bin/drupal/" title="CS193p iPhone development homepage" target="_blank">Stanford University CS193p</a> lecture series taught by Paul Hegarty. The assignment builds on the <a title="Reverse Polish Notation" href="http://en.wikipedia.org/wiki/Reverse_Polish_notation" target="_blank">RPN</a> calculator that was demo-ed in lecture two. The referenced assignment and the walkthrough are available for download <a title="Assignment 1 artifacts" href="http://www.stanford.edu/class/cs193p/cgi-bin/drupal/node/261" target="_blank">here.</a>

Please let me know any questions, comments or improvements that you may have.

Ok, let's go....
<!--more-->
</br>
<strong>1. Follow the walk-through instructions (separate document) to build and run the calculator in the iPhone Simulator. Do not proceed to the next steps unless your calculator functions as expected and builds without warnings or errors.</strong>

Pretty straightforward, just need to follow the documented instructions. The walkthrough is augmented with lots of useful tidbits to help get the hang of things. I think it took me a couple of hours to work through.
</br></br>
<strong>2. Your calculator already works with floating point numbers (e.g. if you touch the buttons 3 Enter 4 / it will properly show the resulting value of 0.75), however, there is no way for the user to enter a floating point number. Remedy this. Allow only legal floating point numbers to be entered (e.g. “192.168.0.1” is not a legal floating point number). Don’t worry too much about precision in this assignment.</strong>

I created a new Calculator keypad button in the main storyboard and specified a new action to be sent to the Controller when the user touches the button. The Controller implementation of the action looks like this: 

<code lang="objc">
- (IBAction)pointPressed {  
	
	NSRange range = [self.display.text rangeOfString:@"."]; 		
	if (range.location == NSNotFound) {
		self.display.text = [self.display.text stringByAppendingString:@"."];
	}        
	self.userIsInTheMiddleOfEnteringNumber = YES;    
}
</code>

We want to append a point symbol to the display, but only if the text in the display doesn't already contain a point. The hints came in handy to help find the right NSString method to use. 

We should also change our state so that our calculator knows that the user is in the middle of entering a number. This covers the case where <strong>.</strong> is the first key pressed in a new calculation.
</br></br>
<strong>3. Add the following 4 operation buttons:<ul>
<li>sin : calculates the sine of the top operand on the stack</li>
<li>cos : calculates the cosine of the top operand on the stack.</li>
<li>sqrt : calculates the square root of the top operand on the stack.</li>
<li>&#960;: calculates (well, conjures up) the value of &#960;. Examples: 3 &#960; * should put three times the value of &#960; into the display on your calculator, so should 3 Enter &#960; *, so should &#960; 3 *. Perhaps unexpectedly, &#960; Enter 3 * + would result in 4 times &#960; being shown. You should understand why this is the case. NOTE: This required task is to add &#960; as an operation (an operation which takes no arguments off of the operand stack), not a new way of entering an operand into the display.</li>
</ul></strong>

I created four new buttons, one for each of the new operations. and I bound them all to the existing operationPressed method in the Controller. You gotta love the ctrl-click-drag functionality that xCode provides!

I updated the CalculatorBrain implementation class, adding to the performOperation method as highlighted below:

<code lang="objc" highlight="14,15,16,17,18,19,20,21">
- (double)performOperation:(NSString *)operation {
    double result = 0;
    
    if ([operation isEqualToString:@"+"]) {
        result = [self popOperand] + [self popOperand];
    } else if ([@"*" isEqualToString:operation]) {
        result = [self popOperand] * [self popOperand];
    } else if ([operation isEqualToString:@"-"]) {
        double substrahend = [self popOperand];
        result = [self popOperand] - substrahend;
    } else if ([operation isEqualToString:@"/"]) {
        double divisor = [self popOperand];
        result = [self popOperand] / divisor;        
    } else if ([operation isEqualToString:@"sin"]) {
        result = sin ([self popOperand]);        
    } else if ([operation isEqualToString:@"cos"]) {
        result = cos ([self popOperand]);
    } else if ([operation isEqualToString:@"sqrt"]) {
        result = sqrt([self popOperand]);
    } else if ([operation isEqualToString:@"?"]) {
        result = M_PI;
    }    
    
    [self pushOperand:result];    
    return result;      
}
</code>
Not too tricky, with a little help from hint number 5! The functions and Pi are defined in Math.h. How exactly the code accesses these I am not quite sure, since Math.h is not explicitly included. Maybe access is via Foundation.h, imported within CalculatorBrain.h. If anyone knows the answer, please let me know :-)

<strong>Why do we get the perhaps unexpected result for <em>&#960; Enter 3 * +</em> of <em>4 times &#960;.</em>?</strong>

It is because we are treating &#960; as an operation, not as an operand. When we press &#960;, the Controller calls the Brain to perform the operation, and the Brain pushes the result of the operation on to the <em>operandStack</em>. We press Enter and the Controller asks the Brain to push the display text on to the stack. So now we have two 3.14159 entries in the stack. Going on to press 3 * will push 3 on to the stack and perform a times operation, resulting in a stack containing the value of &#960; and the result of 3*3.14159. Pressing + will then add these two together, resulting in a value equal to 4 times &#960;. Hurrah!
</br></br>
<a name="task4">&nbsp;</a>
<strong>4. Add a new text label (UILabel) to your user-interface which shows everything that has been sent to the brain (separated by spaces). For example, if the user has entered 6.3 Enter 5 + 2 *, this new text label would show 6.3 5 + 2 *. A good place to put this label is to make it a thin strip above the display text label. Don’t forget to have the C button clear this too. All of the code for this task should be in your Controller (no changes to your Model are required for this one). You do not have to display an unlimited number of operations and operands, just a reasonable amount.</strong>

The new label requires a new outlet. I called mine <em>calculation</em> and created it by ctrl-dragging the label to the Controller header file. 

We want to record in <em>calculation</em> everything that gets sent to the Brain, neatly formatted. At this point, Brain messages are only sent when the <em>operationPressed</em> or the <em>enterPressed</em> methods are invoked. 

For reuse, I wrote a new Controller method which is then called by the two actions.
 
<code lang="objc">
- (void)appendToCalculation:(NSString*) text {
	
	self.calculation.text = 
		[self.calculation.text stringByAppendingString:
			[NSString stringWithFormat:@"%@ ", text]];
}
</code>

The <em>stringWithFormat</em> ensures things look tidy.

We then just need to message the new method from our <em>enterPressed</em> and <em>operationPressed</em> action implementations.

<code lang="objc" highlight = "3">
- (IBAction)enterPressed {
    [self.brain pushOperand:[self.display.text doubleValue]];
	[self appendToCalculation:self.display.text];	
    self.userIsInTheMiddleOfEnteringNumber = NO;
}
</code>
<code lang="objc" highlight="6">
- (IBAction)operationPressed:(UIButton *)sender {
	if (self.userIsInTheMiddleOfEnteringNumber) {
        [self enterPressed];
    }	
	NSString *operation = [sender currentTitle];
	[self appendToCalculation:operation];
	double result = [self.brain performOperation:operation];
    self.display.text = [NSString stringWithFormat:@"%g", result];
}
</code>
Cushty!
</br></br>
<strong>5. Add a “C” button that clears everything (for example, the display in your View, the operand stack in your Model, any state you maintain in your Controller, etc.). Make sure 3 7 C 5 results in 5 showing in the display. You will have to add API to your Model to support this feature.</strong>

Another button on the calculator and another action to implement. We also need to add new functionality to the brain, so that we can empty it on request. I added the following to the brain implementation, with a public declaration in the brain header file.
<code lang="objc">
- (void)empty {
    self.operandStack = nil;
}
</code>

Seems a little cheeky just resetting the stack to nil and allowing the getter to allocate and reinitialise as required. Not sure, whether this is entirely good practice really; perhaps it causes memory fragmentation.....

And for the clearPressed action:

<code lang="objc">
- (IBAction)clearPressed {
    [self.brain empty];
    self.display.text = @"0";
    self.calculation.text = @"";
	self.userIsInTheMiddleOfEnteringNumber = NO;
}
</code>

Empty the brain, set the display to 0, set the calculation label to "empty" text and the state of the Controller to signify a new calculation.
</br></br>
<strong>6. If the user performs an operation for which he or she has not entered enough operands, use zero as the missing operand(s) (the code from the walkthrough does this already, so there is nothing to do for this task, it is just a clarification of what is required). Protect against invalid operands though (e.g. divide by zero).</strong>

To protect against invalid operands, I removed the test for zero, done by the brain before attempting to divide one number by another. This results in the word "inf" being displayed. Square rooting a negative number gives the display "nan". Seems good enough to me :-) 
</br></br>

An that's it for Assignment 1, at least as far as the required tasks go. Next post, I will detail my solution for the extra credit tasks.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>76</wp:post_id>
		<wp:post_date>2012-03-07 17:18:37</wp:post_date>
		<wp:post_date_gmt>2012-03-07 17:18:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>assignment-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="all-assignments"><![CDATA[All assignments]]></category>
		<category domain="post_tag" nicename="assignment-1"><![CDATA[assignment 1]]></category>
		<category domain="post_tag" nicename="cs193p"><![CDATA[CS193p]]></category>
		<category domain="post_tag" nicename="fall-2011"><![CDATA[fall 2011]]></category>
		<category domain="post_tag" nicename="rpn-calculator"><![CDATA[RPN calculator]]></category>
		<category domain="post_tag" nicename="stanford-university"><![CDATA[stanford university]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>s2mail</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>11</wp:comment_id>
			<wp:comment_author><![CDATA[Dave]]></wp:comment_author>
			<wp:comment_author_email>dave@i4-apps.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.i4-apps.com</wp:comment_author_url>
			<wp:comment_author_IP>82.69.106.161</wp:comment_author_IP>
			<wp:comment_date>2012-03-09 16:11:14</wp:comment_date>
			<wp:comment_date_gmt>2012-03-09 16:11:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Cheers Al... it is so much more fun :-)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>9</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>9</wp:comment_id>
			<wp:comment_author><![CDATA[Al]]></wp:comment_author>
			<wp:comment_author_email>apps@jawz.co.uk</wp:comment_author_email>
			<wp:comment_author_url>http://www.jawz.co.uk</wp:comment_author_url>
			<wp:comment_author_IP>195.74.148.65</wp:comment_author_IP>
			<wp:comment_date>2012-03-09 14:08:31</wp:comment_date>
			<wp:comment_date_gmt>2012-03-09 14:08:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Looking good Mr B, welcome to the real world :-)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>45</wp:comment_id>
			<wp:comment_author><![CDATA[David Barton]]></wp:comment_author>
			<wp:comment_author_email>db@i4-apps.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>82.69.106.161</wp:comment_author_IP>
			<wp:comment_date>2012-03-31 17:53:54</wp:comment_date>
			<wp:comment_date_gmt>2012-03-31 17:53:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It looks like with your additional clause, if the user put it say "enter;5;enter" it would show a calculation of "5", instead of "0 5". Is that right or is there another aspect you are thinking of? The first zero doesn't seem too bad to me, as the user has explicitly pushed it on the stack by pressing the enter key initially. 

There does seem to be a problem with the original display field though, in that the user can push 0 multiple times and then multiple zeros will be shown…..]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>43</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>44</wp:comment_id>
			<wp:comment_author><![CDATA[David Barton]]></wp:comment_author>
			<wp:comment_author_email>db@i4-apps.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>82.69.106.161</wp:comment_author_IP>
			<wp:comment_date>2012-03-31 16:22:47</wp:comment_date>
			<wp:comment_date_gmt>2012-03-31 16:22:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[comment test]]></wp:comment_content>
			<wp:comment_approved>trash</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
				<wp:meta_value><![CDATA[1333211272]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
				<wp:meta_value><![CDATA[1]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>35</wp:comment_id>
			<wp:comment_author><![CDATA[Phillip Kelly-Ayo]]></wp:comment_author>
			<wp:comment_author_email>kellyayo@hotmail.co.uk</wp:comment_author_email>
			<wp:comment_author_url>http://www.trans-ocracy.com</wp:comment_author_url>
			<wp:comment_author_IP>94.175.117.221</wp:comment_author_IP>
			<wp:comment_date>2012-03-28 12:33:49</wp:comment_date>
			<wp:comment_date_gmt>2012-03-28 12:33:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks David.  I think that I can speak for all iOS dev newbies, in thanking you for helping the community.

Please, please, please keep up the good work.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36</wp:comment_id>
			<wp:comment_author><![CDATA[David Barton]]></wp:comment_author>
			<wp:comment_author_email>dave@i4-apps.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.i4-apps.com</wp:comment_author_url>
			<wp:comment_author_IP>82.69.106.161</wp:comment_author_IP>
			<wp:comment_date>2012-03-28 13:03:52</wp:comment_date>
			<wp:comment_date_gmt>2012-03-28 13:03:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks Phillip :-)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>35</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>43</wp:comment_id>
			<wp:comment_author><![CDATA[Phillip Kelly-Ayo]]></wp:comment_author>
			<wp:comment_author_email>kellyayo@hotmail.co.uk</wp:comment_author_email>
			<wp:comment_author_url>http://www.trans-ocracy.com</wp:comment_author_url>
			<wp:comment_author_IP>94.175.117.221</wp:comment_author_IP>
			<wp:comment_date>2012-03-30 14:47:24</wp:comment_date>
			<wp:comment_date_gmt>2012-03-30 14:47:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi David,

I had a 'leading zero' problem with the new 'calculation' label.  I added an addition if clause to the appendToCalculation method to solve: -

- (void) appendToCalculation: ( NSString * ) text {
            if ( [self.calculation.text isEqualToString: @"0"] ) {
                 self.calculation.text = [ NSString stringWithFormat:@"%@", text ];
            } else {
            // as per original appendToCalculation method
            }           
}

Phil]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41</wp:comment_id>
			<wp:comment_author><![CDATA[Instant Traffic Robot 2]]></wp:comment_author>
			<wp:comment_author_email>paulgreen@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://instanttrafficrobot2.com</wp:comment_author_url>
			<wp:comment_author_IP>173.234.165.8</wp:comment_author_IP>
			<wp:comment_date>2012-03-29 17:08:49</wp:comment_date>
			<wp:comment_date_gmt>2012-03-29 17:08:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[If you're serious about making money with your website, watch this free video about getting free instant targeted traffic to your site http://instanttrafficrobot2.com]]></wp:comment_content>
			<wp:comment_approved>trash</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
				<wp:meta_value><![CDATA[1333045488]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
				<wp:meta_value><![CDATA[0]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Assignment 1: extra credit</title>
		<link>http://www.i4-apps.com/assignment-1-extra-credit/</link>
		<pubDate>Fri, 09 Mar 2012 22:00:33 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://i4-apps.com/?p=219</guid>
		<description></description>
		<content:encoded><![CDATA[This second post describes my solution for the Extra Credit tasks of Assignment 1, part of the <a href="http://www.stanford.edu/class/cs193p/cgi-bin/drupal/" title="CS193p iPhone development homepage" target="_blank">Stanford University CS193p</a> lectures series taught by Paul Hegarty.

So, for the hardcore...
<!--more-->
</br>
<strong>1. Implement a “backspace” button for the user to press if they hit the wrong digit button. This is not intended to be “undo,” so if they hit the wrong operation button, they are out of luck! It’s up to you to decided how to handle the case where they backspace away the entire number they are in the middle of entering, but having the display go completely blank is probably not very user-friendly.</strong>

It took a little while to figure out how to get a &#8592; to appear on the new backspace button. I used Alt-P to print Pi earlier in the assignment, but couldn't find an Alt-key to use here. A bit of searching took me to the Mac's "Edit --> Special Characters" function; it's always good to learn a new trick!

My implementation of <em>backspacePressed</em> looks like this.
<code lang="objc">
- (IBAction)backspacePressed {
	self.display.text =[self.display.text substringToIndex:
						[self.display.text length] - 1]; 
	
	if ( [self.display.text isEqualToString:@""]
		|| [self.display.text isEqualToString:@"-"]) {

		self.display.text = @"0";
		self.userIsInTheMiddleOfEnteringNumber = NO;
	}
}
</code>
The <em>substringToIndex</em> String method does the job..... 

Where the entire number is eaten, I handle this by replacing the text with zero and resetting the state to indicate that the user is no longer in the middle of entering a number.

There are a few more boundary cases to consider here also, such as "nan" and "inf". Maybe another time!
</br></br>
<strong>2. When the user hits an operation button, put an = on the end of the text label that is showing what was sent to the brain (required task #4). Thus the user will be able to tell whether the number in the Calculator’s display is the result of a calculation or a number that the user has just entered.</strong>

In <a href="http://www.i4-apps.com/assignment-1/#task4" title="Assignment 1, task 4">task #4</a> of the assignment's required tasks, I added the new Controller method <em>appendToCalculation</em> and added a call to this method in the  <em>operationPressed</em> action. 

So, a few tweaks to these two methods...
<code lang="objc" highlight="6">
- (IBAction)operationPressed:(UIButton *)sender {
	if (self.userIsInTheMiddleOfEnteringNumber) {
        [self enterPressed];
    }	
	NSString *operation = [sender currentTitle];
	[self appendToCalculation: [operation stringByAppendingString:@" ="]];	
	double result = [self.brain performOperation:operation];
    self.display.text = [NSString stringWithFormat:@"%g", result];
</code>	
<code lang="objc" highlight="3,4,5">
- (void)appendToCalculation:(NSString*) text {
	
	self.calculation.text = 
		[self.calculation.text stringByReplacingOccurrencesOfString:@"= " 
														 withString:@""];
	self.calculation.text = 
		[self.calculation.text stringByAppendingString:
			[NSString stringWithFormat:@"%@ ", text]];
}
</code>

... in <em>operationPressed</em> we just add the = symbol to the operator we are sending to <em>appendToCalculation</em>.

In <em>appendtoCalculation</em> we need to remove any existing = symbol before we add anything new to our <em>calculation</em> label. The <em>stringByReplacingOccurencesOfString</em> function seems to do the trick nicely.
</br></br>
<strong>3. Add a +/- operation which changes the sign of the number in the display. Be careful with this one. If the user is in the middle of entering a number, you probably want to change the sign of that number and let them continue entering it, not force an enterPressed like other operations do. But if they are not in the middle of entering a number, then it would work just like any other single-operand operation (e.g. sqrt).</strong>

To the last task....

A new button and a new Controller method, <em>signChangePressed</em>, for the +/- operation.
<code lang="objc">
- (IBAction)signChangePressed:(UIButton *)sender {
    
    if (self.userIsInTheMiddleOfEnteringNumber) {        
        if ([[self.display.text substringToIndex:1] isEqualToString:@"-"]) {            
            self.display.text = [self.display.text substringFromIndex:1];
        } else {
            self.display.text = [@"-" stringByAppendingString:self.display.text]; 
        }
    } else {
		[self operationPressed:sender];
    }    
}
</code>
If the user is in the middle of entering a number we just want to change the display, so we just need to do some text manipulation. If the user is not entering a number, then we want to do a calculator operation and by including the UIButton parameter in the method signature we can make use of <em>operationPressed</em>, passing along <em>sender</em>.

We need to add a little more code to the <em>brain</em> too.

<code lang="objc" highlight="22,23">
- (double)performOperation:(NSString *)operation {
    double result = 0;
   
    if ([operation isEqualToString:@"+"]) {
        result = [self popOperand] + [self popOperand];
    } else if ([@"*" isEqualToString:operation]) {
        result = [self popOperand] * [self popOperand];
    } else if ([operation isEqualToString:@"-"]) {
        double substrahend = [self popOperand];
        result = [self popOperand] - substrahend;
    } else if ([operation isEqualToString:@"/"]) {
        double divisor = [self popOperand];
        result = [self popOperand] / divisor;        
    } else if ([operation isEqualToString:@"sin"]) {
        result = sin ([self popOperand]);        
    } else if ([operation isEqualToString:@"cos"]) {
        result = cos ([self popOperand]);
    } else if ([operation isEqualToString:@"sqrt"]) {
        result = sqrt([self popOperand]);
    } else if ([operation isEqualToString:@"?"]) {
        result = M_PI;
    } else if ([operation isEqualToString:@"±"]) {
		result = [self popOperand] * -1;
	}
    
    [self pushOperand:result];    
    return result;      
}
</code>
I just multiplied the top of the stack by -1. Seems to work nicely!
</br>
And that's it for assignment 1. My RPN Calculator now looks like this.
<center>
<img src="http://i4-apps.com/wp-content/uploads/2012/03/assignment1.tiff" alt="Screenshot for assignment 1" />
</center>
Wayhey!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>219</wp:post_id>
		<wp:post_date>2012-03-09 22:00:33</wp:post_date>
		<wp:post_date_gmt>2012-03-09 22:00:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>assignment-1-extra-credit</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="all-assignments"><![CDATA[All assignments]]></category>
		<category domain="post_tag" nicename="assignment-1"><![CDATA[assignment 1]]></category>
		<category domain="post_tag" nicename="cs193p"><![CDATA[CS193p]]></category>
		<category domain="post_tag" nicename="fall-2011"><![CDATA[fall 2011]]></category>
		<category domain="post_tag" nicename="rpn-calculator"><![CDATA[RPN calculator]]></category>
		<category domain="post_tag" nicename="stanford-university"><![CDATA[stanford university]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>s2mail</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>29</wp:comment_id>
			<wp:comment_author><![CDATA[Auditor]]></wp:comment_author>
			<wp:comment_author_email>auditor@xcode.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>98.231.194.201</wp:comment_author_IP>
			<wp:comment_date>2012-03-26 01:14:16</wp:comment_date>
			<wp:comment_date_gmt>2012-03-26 01:14:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[In operationPressed this code is redundant?
if (self.userIsInTheMiddleOfEnteringNumber)
        [self enterPressed]; 

Because enterPressed also checks for userIsInTheMiddleOfEnteringNumber.
No need to check here also.  Just execute
[self enterPressed];

Less code = less chance for bugs.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>30</wp:comment_id>
			<wp:comment_author><![CDATA[Auditor]]></wp:comment_author>
			<wp:comment_author_email>auditor@xcode.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>98.231.194.201</wp:comment_author_IP>
			<wp:comment_date>2012-03-26 01:19:46</wp:comment_date>
			<wp:comment_date_gmt>2012-03-26 01:19:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The code for subtraction could be simplified?
Try This Code
else if ([operation isEqualToString:@"-"]){
     result = 0.0 - [self popOperand] + [self popOperand];

Don't have to declare "subtrahend"   Less code = Less chance for bugs.
==============================
Original Code
else if ([operation isEqualToString:@"-"]) {
        double substrahend = [self popOperand];
        result = [self popOperand] - substrahend;]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>31</wp:comment_id>
			<wp:comment_author><![CDATA[David Barton]]></wp:comment_author>
			<wp:comment_author_email>dave@i4-apps.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.i4-apps.com</wp:comment_author_url>
			<wp:comment_author_IP>82.69.106.161</wp:comment_author_IP>
			<wp:comment_date>2012-03-26 07:52:33</wp:comment_date>
			<wp:comment_date_gmt>2012-03-26 07:52:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[hi - thanks for the comments.

enterPressed isn't checking for userIsInTheMiddleOfEnteringNumber... or maybe not explicitly at least..

<code lang="objc">
- (IBAction)enterPressed {
    [self.brain pushOperand:[self.display.text doubleValue]];
    [self appendToCalculation:self.display.text];   
    self.userIsInTheMiddleOfEnteringNumber = NO;
}
</code>

The method does assume though that the user is in the middle of entering ..  and if the user isn't and has pressed the operation key then it would seem preferable to push 0? - no code change as this is what should be in the display. To enable this, it would require removing the check...





]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>29</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>32</wp:comment_id>
			<wp:comment_author><![CDATA[David Barton]]></wp:comment_author>
			<wp:comment_author_email>dave@i4-apps.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.i4-apps.com</wp:comment_author_url>
			<wp:comment_author_IP>82.69.106.161</wp:comment_author_IP>
			<wp:comment_date>2012-03-26 07:58:21</wp:comment_date>
			<wp:comment_date_gmt>2012-03-26 07:58:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ah yes, it does seem unnecessary to declare subtrahend. Actually, the same is probably true for divisor in that we could use (1 / [self popOperand]) * [self popOperand]), instead of declaring up front.

Perhaps there is trade-off in that the reduced code here makes things a little less readable.... although as you say, less code = less chance of bugs...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>30</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>assignment1</title>
		<link>http://www.i4-apps.com/?attachment_id=281</link>
		<pubDate>Fri, 09 Mar 2012 17:14:12 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://i4-apps.com/wp-content/uploads/2012/03/assignment1.tiff</guid>
		<description></description>
		<content:encoded><![CDATA[Screenshot of solution for assignment 1]]></content:encoded>
		<excerpt:encoded><![CDATA[assignment 1]]></excerpt:encoded>
		<wp:post_id>281</wp:post_id>
		<wp:post_date>2012-03-09 17:14:12</wp:post_date>
		<wp:post_date_gmt>2012-03-09 17:14:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>assignment1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.i4-apps.com/wp-content/uploads/2012/03/assignment1.tiff</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/03/assignment1.tiff]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[Assignment 1 screenshot]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Assignment 2: task1</title>
		<link>http://www.i4-apps.com/assignment-2-task1/</link>
		<pubDate>Tue, 13 Mar 2012 09:53:36 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.i4-apps.com/?p=311</guid>
		<description></description>
		<content:encoded><![CDATA[I have been working through the excellent <a href="http://www.stanford.edu/class/cs193p/cgi-bin/drupal/" title="CS193p iPhone development homepage" target="_blank">iPhone development course</a> at Stanford University taught by Paul Hegarty (CS193p). This post is my solution to task1 of the second assignment, available for download <a title="Assignment 2 artifacts" href="http://www.stanford.edu/class/cs193p/cgi-bin/drupal/node/265" target="_blank">here.</a>

I am finding this assignment quite a bit trickier than the first. Please let me know any suggested improvements, tips or useful info you can share.

So, with hardly anymore ado.... 
<!--more-->
As a pre-requisite we need to merge the CalculatorBrain API, demo-ed in lecture 4 into our Assignment 1 code. 

I won't re-state the tasks in detail this time, I will just summarise and post my solution. I've decided to comment the code better, rather than provide too much detail underneath each snippet. It's far less time-consuming!

<strong>Implement the capability for the CalculatorBrain to accept variables as operands</strong>
<code lang="objc">
- (void)pushVariable:(NSString *) variable {
		[self.programStack addObject:variable];	
}
</code>
So far so good... it's just a matter of adding the given variable to the <em>programStack</em>, in the same way in which operands and operations are added.
</br></br>
<strong>Add a new version of the <em>runProgram</em> method to support programs containing variables. Enable program to run with a supplied dictionary of variable values.</strong>
<code lang="objc">
+ (double) runProgram:(id)program 
  usingVariableValues:(NSDictionary *)variableValues {
	
	// Ensure program is an NSArray
	if (![program isKindOfClass:[NSArray class]]) return 0;
	
	NSMutableArray *stack= [program mutableCopy];
	
	// For each item in the program
	for (int i=0; i < [stack count]; i++) {
		id obj = [stack objectAtIndex:i]; 

		// See whether we think the item is a variable
		if ([obj isKindOfClass:[NSString class]] && ![self isOperation:obj]) {	
			id value = [variableValues objectForKey:obj];			
			// If value is not an instance of NSNumber, set it to zero
			if (![value isKindOfClass:[NSNumber class]]) {
				value = [NSNumber numberWithInt:0];
			}			
			// Replace program variable with value.
			[stack replaceObjectAtIndex:i withObject:value];
		}		
	}	
	// Starting popping off the stack
	return [self popOperandOffProgramStack:stack];	
}
</code>
The implementation relies on another method, suggested in hint #5.
<code lang="objc">
+ (BOOL)isOperation:(NSString *)operation {
	// Create a set of known operations
	NSSet *operationSet = [NSSet setWithObjects: @"+", @"-", @"*", @"/", @"sin", 
								  @"cos", @"sqrt", @"?", @"±", nil];
	
	return [operationSet containsObject:operation];
}
</code>
And we need to update the original <em>runProgram </em>for code re-use.
<code lang="objc">
+ (double)runProgram:(id)program {
	// Call the new runProgram method with a nil dictionary
	return [self runProgram:program usingVariableValues:nil];
}
</code>
</br></br>
<strong>Create a class method that returns the names of all variables for a given program.</strong>
<code lang="objc">
+ (NSSet *)variablesUsedInProgram:(id)program {	
	
	// Ensure program is an NSArray
	if (![program isKindOfClass:[NSArray class]]) return nil;
	
	NSMutableSet *variables = [NSMutableSet set];
	
	// For each item in the program
	for (id obj in program) {
		// If we think it's a variable add it to the variables set
		if ([obj isKindOfClass:[NSString class]] && ![self isOperation:obj]) {
			[variables addObject:obj]; 	
		}
	}	
	// Return nil if we don't have any variables
	if ([variables count] == 0) return nil; else return [variables copy];
}
</code>
</br></br>
I also added some some support to enable testing. If we add a new public method to the brain to push operators then we can use existing CalculatorBrain capabilities to help us create programs. First we add in:
<code lang="objc">
- (void)pushOperation:(NSString *) operation {
	[self.programStack addObject:operation];	
}
</code>
I then added a new button and implemented a new Controller action.
<code lang="objc">
- (IBAction)testPressed {
	
	CalculatorBrain *testBrain = [self brain];

	// Setup the brain
	[testBrain pushVariable:@"a"];
	[testBrain pushVariable:@"a"];
	[testBrain pushOperation:@"*"];
	[testBrain pushVariable:@"b"];
	[testBrain pushVariable:@"b"];
	[testBrain pushOperation:@"*"];
	[testBrain pushOperation:@"+"];
	[testBrain pushOperation:@"sqrt"];	
	
	// Retrieve the program
	NSArray *program = testBrain.program;
	
	// Setup the dictionary
	NSDictionary *dictionary = 
	[NSDictionary dictionaryWithObjectsAndKeys:
	 [NSNumber numberWithDouble:3], @"a",
	 [NSNumber numberWithDouble:4], @"b", nil];
	
	// Run the program with variables
	NSLog(@"Running the program with variables returns the value %g",
			[CalculatorBrain runProgram:program usingVariableValues:dictionary]);

	// List the variables in program	
	NSLog(@"Variables in program are %@", 
			[[CalculatorBrain variablesUsedInProgram:program] description]);			
}
</code>
Seems to work :-)

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>311</wp:post_id>
		<wp:post_date>2012-03-13 09:53:36</wp:post_date>
		<wp:post_date_gmt>2012-03-13 09:53:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>assignment-2-task1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="all-assignments"><![CDATA[All assignments]]></category>
		<category domain="post_tag" nicename="assignment-2"><![CDATA[assignment 2]]></category>
		<category domain="post_tag" nicename="cs193p"><![CDATA[CS193p]]></category>
		<category domain="post_tag" nicename="fall-2011"><![CDATA[fall 2011]]></category>
		<category domain="post_tag" nicename="rpn-calculator"><![CDATA[RPN calculator]]></category>
		<category domain="post_tag" nicename="stanford-university"><![CDATA[stanford university]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>s2mail</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>22</wp:comment_id>
			<wp:comment_author><![CDATA[David Barton]]></wp:comment_author>
			<wp:comment_author_email>dave@i4-apps.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.i4-apps.com</wp:comment_author_url>
			<wp:comment_author_IP>82.69.106.161</wp:comment_author_IP>
			<wp:comment_date>2012-03-16 15:00:29</wp:comment_date>
			<wp:comment_date_gmt>2012-03-16 15:00:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Mani - thanks for posting.

My understanding is that the Test buttons are used as a mechanism by which a user can set values for parameters that are part of a program. 

This post only covers task 1 of the assignment, which doesn't include that mechanism. Task 2 can be found <a href=http://www.i4-apps.com/assignment-2-task2/ rel="nofollow">here</a>, and the bit that does show the mechanism for how the different test values can be supplied (Task 3) can be found <a href="http://www.i4-apps.com/assignment-2-completion/" rel="nofollow">here.</a> 

Hope that helps...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>21</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>21</wp:comment_id>
			<wp:comment_author><![CDATA[mani]]></wp:comment_author>
			<wp:comment_author_email>greatmani99@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>122.167.83.226</wp:comment_author_IP>
			<wp:comment_date>2012-03-16 04:00:40</wp:comment_date>
			<wp:comment_date_gmt>2012-03-16 04:00:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[HI Thanks for explanation, i have a quick question on understanding of the requirements.  basically, what  is the purpose of the "Test 1", "Test 2", "Test 3" buttons, and how do we supply the the value of the variables x,a,b? basically in the calculator i can enter aa*bb*+sqrt, but how do i supply the values of a,b after i entered in the calculator? this is some what confusing me.

Again, thanks for the detail explation]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>62</wp:comment_id>
			<wp:comment_author><![CDATA[Diego]]></wp:comment_author>
			<wp:comment_author_email>digoyox@yahoo.es</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>85.55.103.185</wp:comment_author_IP>
			<wp:comment_date>2012-04-11 16:13:35</wp:comment_date>
			<wp:comment_date_gmt>2012-04-11 16:13:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[i4-apps is the response to my pride.

I am working by myself on standford iOS programming course, and your post is really helpful


Thanks !!!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>69</wp:comment_id>
			<wp:comment_author><![CDATA[David Barton]]></wp:comment_author>
			<wp:comment_author_email>dave@i4-apps.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>82.69.106.161</wp:comment_author_IP>
			<wp:comment_date>2012-04-14 14:25:35</wp:comment_date>
			<wp:comment_date_gmt>2012-04-14 14:25:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks :-)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>62</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Wordpress plugins</title>
		<link>http://www.i4-apps.com/wordpress-plugins/</link>
		<pubDate>Tue, 13 Mar 2012 13:21:08 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.i4-apps.com/?page_id=353</guid>
		<description></description>
		<content:encoded><![CDATA[Here is a list of the plug-ins I am using.

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>353</wp:post_id>
		<wp:post_date>2012-03-13 13:21:08</wp:post_date>
		<wp:post_date_gmt>2012-03-13 13:21:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>wordpress-plugins</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>21</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[draft]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1333056060]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Assignment 2: task2</title>
		<link>http://www.i4-apps.com/assignment-2-task2/</link>
		<pubDate>Tue, 13 Mar 2012 21:36:50 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.i4-apps.com/?p=364</guid>
		<description></description>
		<content:encoded><![CDATA[This second task develops the solution for the second assignment of the <a href="http://www.stanford.edu/class/cs193p/cgi-bin/drupal/" title="CS193p iPhone development homepage" target="_blank">Stanford CS193p</a> iOS Application Development course. As you might expect it follows on from my solution to <a href="http://www.i4-apps.com/assignment-2-task1/" title="Assignment 2: task1">Assignment 2: task1 :-)</a>

Let's rock...
<!--more-->
This proved to be another tricky task, requiring quite a bit of head scratching! Please let me know if you spot any mistakes or have any suggested improvements. To summarise the task:

<strong>Re-implement the <em>descriptionOfProgram:</em> method to display the passed program in a more user-friendly manner. Correctly and minimally manage parentheses in the output and enable output for multiple "things" on the stack</strong>

The new and updated methods that I added to the CalculatorBrain are as below:

<code lang="objc">
+ (NSString *)descriptionOfProgram:(id)program {	

	// Check program is valid and if not return message
	if (![self isValidProgram:program]) return @"Invalid program!";
	
	NSMutableArray *stack= [program mutableCopy];
	NSMutableArray *expressionArray = [NSMutableArray array];
	
	// Call recursive method to describe the stack, removing superfluous brackets at the
	// start and end of the resulting expression. Add the result into an expression array
	// and continue if there are still more items in the stack. 
	// our description Array, and if the 
	while (stack.count > 0) {
		[expressionArray addObject:[self deBracket:[self descriptionOffTopOfStack:stack]]];
	}
	
	// Return a list of comma seperated programs
	return [expressionArray componentsJoinedByString:@","];		 
}
</code>
... which calls through to the suggested <em>descriptionOffTopOfStack</em> method (hint #3).
<code lang="objc">
+ (NSString *)descriptionOffTopOfStack:(NSMutableArray *)stack {
	
	NSString *description;
	
	// Retrieve and remove the object at the top of the stack 
	id topOfStack = [stack lastObject];
	if (topOfStack) [stack removeLastObject]; else return @"";
	
	// If the top of stack is an NSNumber then just return it as a NSString
	if ([topOfStack isKindOfClass:[NSNumber class]]) {
		return [topOfStack description];
	}		
	// but if it's an NSString we need to do some formatting
	else if ([topOfStack isKindOfClass:[NSString class]]) {	
		// If top of stack is a no operand operation, or it's a variable then we
		// want to return description in the form "x"
		if (![self isOperation:topOfStack] ||
			 [self isNoOperandOperation:topOfStack]) {	
			description = topOfStack;
		} 
		// If the top of stack is one operand operation, then we want to return an
		// expression in the form "f(x)"
		else if ([self isOneOperandOperation:topOfStack]) {
			// We need to remove any outside brackets on the recursive description
			// because we are going to put some new brackets on.
			NSString *x = [self deBracket:[self descriptionOffTopOfStack:stack]];
			description = [NSString stringWithFormat:@"%@(%@)", topOfStack, x];	
		}
		// If the top of stack is a two operand operation then we want to return
		// an expression in the form "x op. y".
		else if ([self isTwoOperandOperation:topOfStack]) {
			NSString *y = [self descriptionOffTopOfStack:stack];
			NSString *x = [self descriptionOffTopOfStack:stack];
			
			// If the top of stack is For + and - we need to add brackets so that
			// we support precedence rules.  
			if ([topOfStack isEqualToString:@"+"] || 
				 [topOfStack isEqualToString:@"-"]) {				
				// String any existing brackets, before re-adding
				description = [NSString stringWithFormat:@"(%@ %@ %@)",
									[self deBracket:x], topOfStack, [self deBracket:y]];
			} 
			// Otherwise, we are dealing with * or / so no need for brackets
			else {
				description = [NSString stringWithFormat:@"%@ %@ %@",
									x, topOfStack ,y];
			}
		}		
	}
	return description ;		
}
</code>
It feels like there maybe a better to manage parenthesis simplification. It would be great to hear if you have a taken different approach. Anyway, my <em>deBracket</em> method to strip redundant parenthesis looks like:
<code lang="objc">
+ (NSString *)deBracket:(NSString *)expression {
	
	NSString *description = expression;
	
	// Check to see if there is a bracket at the start and end of the expression
	// If so, then strip the description of these brackets and return.
	if ([expression hasPrefix:@"("] && [expression hasSuffix:@")"]) {
		description = [description substringFromIndex:1];
		description = [description substringToIndex:[description length] - 1];
	}	
	
	// Also need to do a final check, to cover the case where removing the brackets
	// results in a + b) * (c + d. Have a look at the position of the brackets and
	// if there is a ) before a (, then we need to revert back to expression
	NSRange openBracket = [description rangeOfString:@"("];
	NSRange closeBracket = [description rangeOfString:@")"];
	
	if (openBracket.location <= closeBracket.location) return description;
	else return expression;	
}
</code>
... I'm not convinced about the method name either!

My test harness is an action in the Controller, triggered by a button press...
<code lang="objc">
- (IBAction)testPressed {
	
	CalculatorBrain *testBrain = [self brain];
	
	// Test a
	[testBrain empty];
	[testBrain pushOperand:3];
	[testBrain pushOperand:5];
	[testBrain pushOperand:6];
	[testBrain pushOperand:7];
	[testBrain pushOperation:@"+"];
	[testBrain pushOperation:@"*"];
	[testBrain pushOperation:@"-"];
	
	// Test b
	[testBrain pushOperand:3];
	[testBrain pushOperand:5];
	[testBrain pushOperation:@"+"];
	[testBrain pushOperation:@"sqrt"];
	
	// Test c
	//[testBrain empty];
	[testBrain pushOperand:3];
	[testBrain pushOperation:@"sqrt"];
	[testBrain pushOperation:@"sqrt"];
	
	// Test d
	[testBrain pushOperand:3];
	[testBrain pushOperand:5];
	[testBrain pushOperation:@"sqrt"];
	[testBrain pushOperation:@"+"];
	
	// Test e
	[testBrain pushOperation:@"?"];
	[testBrain pushVariable:@"r"];
	[testBrain pushVariable:@"r"];
	[testBrain pushOperation:@"*"];
	[testBrain pushOperation:@"*"];
	
	// Test f
	[testBrain pushVariable:@"a"];
	[testBrain pushVariable:@"a"];
	[testBrain pushOperation:@"*"];
	[testBrain pushVariable:@"b"];
	[testBrain pushVariable:@"b"];
	[testBrain pushOperation:@"*"];
	[testBrain pushOperation:@"+"];
	[testBrain pushOperation:@"sqrt"];
	
	//Print the description
	NSLog(@"Program is :%@",[CalculatorBrain descriptionOfProgram:[testBrain program]]);
}
</code>

Lovely jubbly... that's it for task2. I am beginning to feel more comfortable working with xCode and Objective C... so onwards and upwards :-)
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>364</wp:post_id>
		<wp:post_date>2012-03-13 21:36:50</wp:post_date>
		<wp:post_date_gmt>2012-03-13 21:36:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>assignment-2-task2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="all-assignments"><![CDATA[All assignments]]></category>
		<category domain="post_tag" nicename="assignment-2"><![CDATA[assignment 2]]></category>
		<category domain="post_tag" nicename="cs193p"><![CDATA[CS193p]]></category>
		<category domain="post_tag" nicename="fall-2011"><![CDATA[fall 2011]]></category>
		<category domain="post_tag" nicename="rpn-calculator"><![CDATA[RPN calculator]]></category>
		<category domain="post_tag" nicename="stanford-university"><![CDATA[stanford university]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>s2mail</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>47</wp:comment_id>
			<wp:comment_author><![CDATA[Phillip Kelly-Ayo]]></wp:comment_author>
			<wp:comment_author_email>kellyayo@hotmail.co.uk</wp:comment_author_email>
			<wp:comment_author_url>http://www.trans-ocracy.com</wp:comment_author_url>
			<wp:comment_author_IP>94.175.117.221</wp:comment_author_IP>
			<wp:comment_date>2012-04-03 11:11:20</wp:comment_date>
			<wp:comment_date_gmt>2012-04-03 11:11:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi David,

Could you please explain the origin of the isValidProgram: method.

Cheers]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>48</wp:comment_id>
			<wp:comment_author><![CDATA[David Barton]]></wp:comment_author>
			<wp:comment_author_email>db@i4-apps.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>82.69.106.161</wp:comment_author_IP>
			<wp:comment_date>2012-04-03 14:01:57</wp:comment_date>
			<wp:comment_date_gmt>2012-04-03 14:01:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ah.. looks like I left that method out … 

isValidProgram look this :

<code lang="objc">
+ (BOOL)isValidProgram:(id)program {
	// It's valid if it's an NSArray
	return [program isKindOfClass:[NSArray class]];
}
</code>
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>47</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>58</wp:comment_id>
			<wp:comment_author><![CDATA[Robinson]]></wp:comment_author>
			<wp:comment_author_email>ffssddaa@naver.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>203.253.159.19</wp:comment_author_IP>
			<wp:comment_date>2012-04-10 01:51:26</wp:comment_date>
			<wp:comment_date_gmt>2012-04-10 01:51:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi David,

Could you please explain the origin of the
isNoOperandOperation
isOnewOperandOperation
isTwoOperandOperation
??]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>64</wp:comment_id>
			<wp:comment_author><![CDATA[Seth Vernon]]></wp:comment_author>
			<wp:comment_author_email>seth.vernon@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>174.253.17.87</wp:comment_author_IP>
			<wp:comment_date>2012-04-12 02:48:29</wp:comment_date>
			<wp:comment_date_gmt>2012-04-12 02:48:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[David- 

It was a relief to see someone working on this course that was actually organized.

I am a bit behind you in the assignments. I got caught cold in assignment 2 with the variables. So I just kept going with the lectures. 

I'm assuming that: isNoOperandOperation; isOneOperandOperation; isTwoOperandOperation
are class methods that need to be created, but I'm thinking that's overkill in the method department. Wouldn't it be easier to create one class method for one operand (which might be in the code already), and add or subtract from each method call?

but I am still getting my head around how to add variables in the running program. 

If I come up with a solution I will post it.

cheers]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>70</wp:comment_id>
			<wp:comment_author><![CDATA[David Barton]]></wp:comment_author>
			<wp:comment_author_email>dave@i4-apps.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>82.69.106.161</wp:comment_author_IP>
			<wp:comment_date>2012-04-14 14:33:20</wp:comment_date>
			<wp:comment_date_gmt>2012-04-14 14:33:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It looks like I left these methods out of the post… They are used to assist with the de-bracketing function. Here they are:

<code lang="objc">
+ (BOOL)isNoOperandOperation:(NSString *)operation {
	// The set of operations requiring no operands
	NSSet * operationSet = [NSSet setWithObjects:@"?",nil];
	return [operationSet containsObject:operation];
}

+ (BOOL)isOneOperandOperation:(NSString *)operation {
	// The set of operations requiring one operands
	NSSet * operationSet = [NSSet setWithObjects:@"sin",@"cos",@"sqrt",@"±",nil];
	return [operationSet containsObject:operation];
}

+ (BOOL)isTwoOperandOperation:(NSString *)operation {
	// The set of operations requiring two operands
	NSSet * operationSet = [NSSet setWithObjects:@"+",@"-",@"*",@"/",nil];
	return [operationSet containsObject:operation];
}

+ (BOOL)isOperation:(NSString *)operation {	
	
	// Check to see if it's in any of our operation sets
	return 
	[self isNoOperandOperation:operation] ||
	[self isOneOperandOperation:operation]||
	[self isTwoOperandOperation:operation];
}
</code>

In assignment 3, we are asked to look at the performance of the application. It turned out that my implementation of these methods is slowing things down quite a bit! I make some improvements in a later post...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>58</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>71</wp:comment_id>
			<wp:comment_author><![CDATA[David Barton]]></wp:comment_author>
			<wp:comment_author_email>dave@i4-apps.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>82.69.106.161</wp:comment_author_IP>
			<wp:comment_date>2012-04-14 14:39:45</wp:comment_date>
			<wp:comment_date_gmt>2012-04-14 14:39:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for the feedback Seth.

These methods are not explicitly part of the assignment - they are of my own making :-). Unfortunately I left them out of the post by mistake - my assignment 2 implementation of them is as in previous comment….

Be good to know if there is a more efficient way this can be done though - I didn't quite follow what you were saying about using one class method… Would be great to see an alternative solution if you come up with one...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>64</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>77</wp:comment_id>
			<wp:comment_author><![CDATA[Seth Vernon]]></wp:comment_author>
			<wp:comment_author_email>seth.vernon@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>67.167.96.55</wp:comment_author_IP>
			<wp:comment_date>2012-04-17 00:39:05</wp:comment_date>
			<wp:comment_date_gmt>2012-04-17 00:39:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yes, I'm not sure of an alternate to these methods. I am still trying to debug my Assignment 2 completion. But I will go back and see as this course progresses. Perhaps we could add them to a block.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>64</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>78</wp:comment_id>
			<wp:comment_author><![CDATA[David Barton]]></wp:comment_author>
			<wp:comment_author_email>dave@i4-apps.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>82.69.106.161</wp:comment_author_IP>
			<wp:comment_date>2012-04-17 08:40:35</wp:comment_date>
			<wp:comment_date_gmt>2012-04-17 08:40:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I haven't quite got to blocks yet in my objective C book… :-). I did revisit these methods as part of performance tuning in assignment 3, so they' re certainly not ideally written in my assignment 2 code. 

Good luck with debugging!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>77</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Assignment 2: completion</title>
		<link>http://www.i4-apps.com/assignment-2-completion/</link>
		<pubDate>Thu, 15 Mar 2012 12:24:15 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.i4-apps.com/?p=394</guid>
		<description></description>
		<content:encoded><![CDATA[Below is my solution for tasks 3,4 & 5 and the extra credit, for the second assignment of the <a href="http://www.stanford.edu/class/cs193p/cgi-bin/drupal/" title="Stanford University CS193p homepage" target="_blank">Fall 2011 CS193p lecture series</a> taught by Paul Hegarty. It follows on from my previous postings, <a href="http://www.i4-apps.com/assignment-2-task1/" title="Assignment 2: task1">Assignment2: task1</a> and <a href="http://www.i4-apps.com/assignment-2-task2/" title="Assignment 2: task2">Assignment2: task2</a>.

These tasks required a pretty much wholesale re-factor of the Controller class. I didn't really get what the assignment was all about until I had completed, and once I'd finished, the amount of code didn't seem to justify the hours spent! Less is clearly more :-).

So, if your mouse still has some click....
<!--more-->
<strong>3. Update the user-interface to test out the new model.
</br>
a. Your UI should already have a UILabel which shows what has been sent to the brain. Change it to now always show the latest description of the program currently in the CalculatorBrain using your descriptionOfProgram:method. It should show the description without substituting variable values (obviously, since descriptionOfProgram: does not take a variable value dictionary as an argument).</strong>

The <em>descriptionOfProgram</em> method was implemented in <a href="http://www.i4-apps.com/assignment-2-task2/" title="Assignment 2: task2">Assignment2: task2</a>. Changing the Controller to use this method is a matter of changing any "<em>self.[outlet].text =</em>" code. My outlet is called <em>calculation</em>, so I've updated the <em>"self.calculation.text ="</em> through the Controller, whenever a brain function is called.
<code lang="objc" highlight="10,11,12">
-(void)synchronizeView {	
	// Find the result by running the program passing in the test variable values
	id result = [CalculatorBrain runProgram:self.brain.program 
								usingVariableValues:self.testVariableValues];	
	
	// If the result is a string, then display it, otherwise get the Number's description
	if ([result isKindOfClass:[NSString class]])	self.display.text = result;
	else self.display.text = [NSString stringWithFormat:@"%g", [result doubleValue]];
	
	// Now the calculation label, from the latest description of program	
	self.calculation.text = 
		[CalculatorBrain descriptionOfProgram:self.brain.program];
	
	// And finally the variables text, with a bit of formatting
	self.variables.text = [[[[[[[self programVariableValues] description]
										stringByReplacingOccurrencesOfString:@"{" withString:@""]
									  stringByReplacingOccurrencesOfString:@"}" withString:@""]
									 stringByReplacingOccurrencesOfString:@";" withString:@""]
									stringByReplacingOccurrencesOfString:@"\"" withString:@""]
								  stringByReplacingOccurrencesOfString:@"<null>" withString:@"0"];
	
	// And the user isn't in the middle of entering a number
	self.userIsInTheMiddleOfEnteringNumber = NO;
}
</code>
</br>
<strong>b. Add a few variable buttons (e.g, x, y, foo). These are buttons that push a variable into the CalculatorBrain.</strong>
<code lang="objc" highlight="2">
- (IBAction)variablePressed:(UIButton *)sender {
	[self.brain pushVariable:sender.currentTitle];
	[self synchronizeView];
}
</code>
</br>
<strong>c. Change your calculator to update its display (as needed) by calling your new runProgram:usingVariableValues: method. The variable values dictionary it passes to this method should be a property in your Controller (let’s call it “testVariableValues”).
</strong>
In a similar way as before, we now change the assignment of "self.display.text", updating whenever a brain message has been sent.
<code lang="objc" highlight="2,3,4,5,6,7,8">
-(void)synchronizeView {	
	// Find the result by running the program passing in the test variable values
	id result = [CalculatorBrain runProgram:self.brain.program 
								usingVariableValues:self.testVariableValues];	
	
	// If the result is a string, then display it, otherwise get the Number's description
	if ([result isKindOfClass:[NSString class]])	self.display.text = result;
	else self.display.text = [NSString stringWithFormat:@"%g", [result doubleValue]];
	
	// Now the calculation label, from the latest description of program	
	self.calculation.text = 
		[CalculatorBrain descriptionOfProgram:self.brain.program];
	
	// And finally the variables text, with a bit of formatting
	self.variables.text = [[[[[[[self programVariableValues] description]
										stringByReplacingOccurrencesOfString:@"{" withString:@""]
									  stringByReplacingOccurrencesOfString:@"}" withString:@""]
									 stringByReplacingOccurrencesOfString:@";" withString:@""]
									stringByReplacingOccurrencesOfString:@"\"" withString:@""]
								  stringByReplacingOccurrencesOfString:@"<null>" withString:@"0"];
	
	// And the user isn't in the middle of entering a number
	self.userIsInTheMiddleOfEnteringNumber = NO;
}
</code>
</br></br>
<strong>d. Add a UILabel to your UI whose contents are determined by iterating through all the variablesUsedInProgram: and displaying each with its current value from testVariableValues. Example display: “x = 5 y = 4.8 foo = 0”.</strong>

A new label with a new outlet. I called mine <em>variables</em>. We need to update this new label whenever something that effects variables changes in the brain. (E.g. A new variable is pushed, the brain is cleared or a variable changes it's value).
<code lang="objc" highlight="14,15,16,17,18,19,20">
-(void)synchronizeView {	
	// Find the result by running the program passing in the test variable values
	id result = [CalculatorBrain runProgram:self.brain.program 
								usingVariableValues:self.testVariableValues];	
	
	// If the result is a string, then display it, otherwise get the Number's description
	if ([result isKindOfClass:[NSString class]])	self.display.text = result;
	else self.display.text = [NSString stringWithFormat:@"%g", [result doubleValue]];
	
	// Now the calculation label, from the latest description of program	
	self.calculation.text = 
		[CalculatorBrain descriptionOfProgram:self.brain.program];
	
	// And finally the variables text, with a bit of formatting
	self.variables.text = [[[[[[[self programVariableValues] description]
										stringByReplacingOccurrencesOfString:@"{" withString:@""]
									  stringByReplacingOccurrencesOfString:@"}" withString:@""]
									 stringByReplacingOccurrencesOfString:@";" withString:@""]
									stringByReplacingOccurrencesOfString:@"\"" withString:@""]
								  stringByReplacingOccurrencesOfString:@"<null>" withString:@"0"];
	
	// And the user isn't in the middle of entering a number
	self.userIsInTheMiddleOfEnteringNumber = NO;
}
</code>
The real work is hidden in programVariableValues, which looks like this.
<code lang="objc">
- (NSDictionary *)programVariableValues {	

	// Find the variables in the current program in the brain as an array
	NSArray *variableArray = 
		[[CalculatorBrain variablesUsedInProgram:self.brain.program] allObjects];
		 
	// Return a description of a dictionary which contains keys and values for the keys 
	// that are in the variable array
	return [self.testVariableValues dictionaryWithValuesForKeys:variableArray];
}
</code>
</br></br>
<strong>e. Add a few different “test” buttons which set testVariableValues to some preset testing values. One of them should set testVariableValues to nil. Don’t forget to update the rest of your UI when you change testVariableValues by pressing one of these test buttons. Make sure that your preset values are good edge-cases for testing (we are intentionally not telling you what to use since part of good programming is figuring out how to thoroughly test your application).</strong>

I added some tests each linked to a new button.
<code lang="objc">
// Some different numbers to the defaults
- (IBAction)test1Pressed {
	self.testVariableValues = [NSDictionary dictionaryWithObjectsAndKeys:
										[NSNumber numberWithDouble:-4], @"x",
										[NSNumber numberWithDouble:3], @"a",
										[NSNumber numberWithDouble:4], @"b", nil];
	[self synchronizeView];
}

// Testing when only one number is provided
- (IBAction)test2Pressed {
	self.testVariableValues = [NSDictionary dictionaryWithObjectsAndKeys:
										[NSNumber numberWithDouble:-5], @"x", nil];
	[self synchronizeView];	
}

// Should revert back to default values
- (IBAction)testNilPressed {
	self.testVariableValues = nil;	
	[self synchronizeView];
}
</code>
Works for me :-).
</br></br>
<strong>4. Add an Undo button to your calculator.</strong>
This seemed to me to be an extension to the existing backspace functionality. 
<code lang="objc">
- (IBAction)undoPressed {
	if (self.userIsInTheMiddleOfEnteringNumber) {
		// Remove the last digit or point from the display
		self.display.text =[self.display.text substringToIndex:
								  [self.display.text length] - 1]; 
	
		// If we are left with no digits or a "-" digit
		if ( [self.display.text isEqualToString:@""]
		 || [self.display.text isEqualToString:@"-"]) {
		
			[self synchronizeView];		
		}	
	} else {
		// Remove the last item from the stack and synchronize the view
		[self.brain removeLastItem];
		[self synchronizeView];
	}	
}
</code>
<em>synchronizeView</em> is shown in the earlier code snippets. I call this method, whenever a change is made to the brain, and additionally this case if we have run out digits to undo. We do need a new method in the CalculatorBrain to enable the last item to be removed from the stack.
<code lang="objc">
- (void)removeLastItem {
	[self.programStack removeLastObject];
}
</code>
</br></br>
<strong>5. Don’t let anything crash your program in CalculatorBrain. It should defend against any value being passed through its API.</strong>

Goes without saying :-). Hmm...
</br></br>
<strong>Extra Credit
Enhance your application to show the user error conditions like divide by zero, square root of a negative number, and insufficient operands.</strong>

The guts of this is to change the <em>popOperandOffProgramStack</em> method in the CalculatorBrain to support returning an id, as suggested in the Assignment. Mine now looks like this:
<code lang="objc">
+ (id)popOperandOffProgramStack:(NSMutableArray *) stack {
	
	NSString * INSUFFICIENT_OPERANDS = @"Insufficient operands!";
	NSString * INVALID_OPERATION = @"Operation not implemented!";
	
	double result = 0;
	
	id topOfStack = [stack lastObject];
	if (topOfStack) [stack removeLastObject]; else return @"0";
	
	// If it's a number then just return it
	if ([topOfStack isKindOfClass:[NSNumber class]]) return topOfStack;		
	
	//Otherwise it's a string
	NSString *operation = topOfStack;
	
	// First check the no operand operations
	if ([operation isEqualToString:@"?"]) { 
		result = M_PI;
	} // Next the one operand operations
	else if ([self isOneOperandOperation:operation]) {
		id operand1 = [self popOperandOffProgramStack:stack];
		// If the operand is a number then ok, otherwise we have insufficient operands
		if ([operand1 isKindOfClass:[NSNumber class]]) {
			// Go ahead and do the operations
			if ([operation isEqualToString:@"sin"]) {
				result = sin ([operand1 doubleValue]); 
			} else if ([operation isEqualToString:@"cos"]) {
				result = cos ([operand1 doubleValue]);
			} else if ([operation isEqualToString:@"sqrt"]) {
				result = sqrt([operand1 doubleValue]);
			} else if ([operation isEqualToString:@"±"]) {
				result = [operand1 doubleValue] * -1;	
			} 
		} else return INSUFFICIENT_OPERANDS;			
	} // A two operand operation methinks...
	else if ([self isTwoOperandOperation:operation]) {
		id operand1 = [self popOperandOffProgramStack:stack];
		id operand2 = [self popOperandOffProgramStack:stack];	
		// Both operands need to be numbers, or we are out of operands
		if ([operand1 isKindOfClass:[NSNumber class]] &&
			 [operand2 isKindOfClass:[NSNumber class]]) {
			// Do the operations
			if ([operation isEqualToString:@"+"]) {
				result = [operand2 doubleValue] + [operand1 doubleValue]; 
			} else if ([@"*" isEqualToString:operation]) {
				result = [operand2 doubleValue] * [operand1 doubleValue];
			} else if ([operation isEqualToString:@"-"]) {
				result = [operand2 doubleValue] - [operand1 doubleValue];
			} else if ([operation isEqualToString:@"/"]) {
				result = [operand2 doubleValue] / [operand1 doubleValue];
			}
		} else return INSUFFICIENT_OPERANDS;
	} else return INVALID_OPERATION;
	
	return [NSNumber numberWithDouble:result];
}
</code>
<em>synchronizeView</em> manages the introspection of the return value to display appropriately to user. It all works fine for insufficient operands, and for divide by zero and root of a negative it seems ok to me to return "NaN" or "Inf", which the system seems to do automatically....
</br>
And that's it for assignment two. My calculator now looks like this.

<center><img src="http://www.i4-apps.com/wp-content/uploads/2012/03/assignment2.tiff" alt="screenshot of calculator at the end of Assignment 2" /></center>
Hurrah! 

Please let me know any comments, suggestions, improvements or tips that you may have :-).











]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>394</wp:post_id>
		<wp:post_date>2012-03-15 12:24:15</wp:post_date>
		<wp:post_date_gmt>2012-03-15 12:24:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>assignment-2-completion</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="all-assignments"><![CDATA[All assignments]]></category>
		<category domain="post_tag" nicename="assignment-2"><![CDATA[assignment 2]]></category>
		<category domain="post_tag" nicename="calculator"><![CDATA[calculator]]></category>
		<category domain="post_tag" nicename="cs193p"><![CDATA[CS193p]]></category>
		<category domain="post_tag" nicename="fall-2011"><![CDATA[fall 2011]]></category>
		<category domain="post_tag" nicename="stanford-university"><![CDATA[stanford university]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[assignment-2-finale]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>s2mail</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>33</wp:comment_id>
			<wp:comment_author><![CDATA[mr curious]]></wp:comment_author>
			<wp:comment_author_email>woodydaniel@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>41.134.17.129</wp:comment_author_IP>
			<wp:comment_date>2012-03-26 12:54:22</wp:comment_date>
			<wp:comment_date_gmt>2012-03-26 12:54:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Awesome work!
Was just wondering, after you changed your popOperandOffProgramStack to return an id, do you not need to change your performOperation and runProgram methods to return an id as well?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>34</wp:comment_id>
			<wp:comment_author><![CDATA[David Barton]]></wp:comment_author>
			<wp:comment_author_email>dave@i4-apps.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.i4-apps.com</wp:comment_author_url>
			<wp:comment_author_IP>82.69.106.161</wp:comment_author_IP>
			<wp:comment_date>2012-03-26 13:09:59</wp:comment_date>
			<wp:comment_date_gmt>2012-03-26 13:09:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[hi mr curious - thanks for the comment.

As you say, you do need to change performOperation and the runProgram methods too, to ensure that they also return id. I forgot to mention that :-)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>33</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37</wp:comment_id>
			<wp:comment_author><![CDATA[Haris]]></wp:comment_author>
			<wp:comment_author_email>haris.kapagioridis@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>65.111.48.162</wp:comment_author_IP>
			<wp:comment_date>2012-03-28 19:28:26</wp:comment_date>
			<wp:comment_date_gmt>2012-03-28 19:28:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thank you very much,i did assignment 1 by my self and was hard for me to do assignment 2 and i was searching for a solution-explanation to study and understand.

you were very helpful thanks again]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>38</wp:comment_id>
			<wp:comment_author><![CDATA[David Barton]]></wp:comment_author>
			<wp:comment_author_email>dave@i4-apps.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.i4-apps.com</wp:comment_author_url>
			<wp:comment_author_IP>82.69.106.161</wp:comment_author_IP>
			<wp:comment_date>2012-03-28 19:32:24</wp:comment_date>
			<wp:comment_date_gmt>2012-03-28 19:32:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Glad it was of some help :-) ... Assignment 3 is coming soon...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>37</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>51</wp:comment_id>
			<wp:comment_author><![CDATA[Phillip Kelly-Ayo]]></wp:comment_author>
			<wp:comment_author_email>kellyayo@hotmail.co.uk</wp:comment_author_email>
			<wp:comment_author_url>http://www.trans-ocracy.com</wp:comment_author_url>
			<wp:comment_author_IP>94.175.117.221</wp:comment_author_IP>
			<wp:comment_date>2012-04-05 19:46:55</wp:comment_date>
			<wp:comment_date_gmt>2012-04-05 19:46:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great tutorial.  Thanks David!!!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>56</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Nichols]]></wp:comment_author>
			<wp:comment_author_email>mark.nichols@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>129.130.34.83</wp:comment_author_IP>
			<wp:comment_date>2012-04-09 20:45:37</wp:comment_date>
			<wp:comment_date_gmt>2012-04-09 20:45:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[When are you calling synchronizeView()? I've read through the progress you've made on both assignment 1 and 2 and I don't see where you created this method, or when you utilize it. 

My approach to these assignments has been slightly different than yours in that I refresh the calculator result directly from operationPressed(). I suspect that you are calling synchronizeView from operationPressed().

Excellent breakdown of you solution to the problems within the assignments.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>73</wp:comment_id>
			<wp:comment_author><![CDATA[David Barton]]></wp:comment_author>
			<wp:comment_author_email>dave@i4-apps.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>82.69.106.161</wp:comment_author_IP>
			<wp:comment_date>2012-04-14 15:58:30</wp:comment_date>
			<wp:comment_date_gmt>2012-04-14 15:58:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi,

I am calling <em>synchroniseView()</em> whenever the brain gets updated -  I think in <em>operationPressed</em>, <em>clearPressed</em>, <em>variablePressed</em> and <em>enterPressed</em>. I started off doing any updates to the view in the individual methods, but in the end figured it would be better to abstract to a single method and then just call this whenever the view needs to be synchronised with the model … ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>56</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>assignment2</title>
		<link>http://www.i4-apps.com/?attachment_id=432</link>
		<pubDate>Thu, 15 Mar 2012 14:53:01 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.i4-apps.com/wp-content/uploads/2012/03/assignment2.tiff</guid>
		<description></description>
		<content:encoded><![CDATA[Screenshot of solution for assignment 2]]></content:encoded>
		<excerpt:encoded><![CDATA[assignment 2]]></excerpt:encoded>
		<wp:post_id>432</wp:post_id>
		<wp:post_date>2012-03-15 14:53:01</wp:post_date>
		<wp:post_date_gmt>2012-03-15 14:53:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>assignment2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.i4-apps.com/wp-content/uploads/2012/03/assignment2.tiff</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[Assignment 2 screenshot]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/03/assignment2.tiff]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Subscribe</title>
		<link>http://www.i4-apps.com/subscribe/</link>
		<pubDate>Thu, 29 Mar 2012 09:39:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.i4-apps.com/?page_id=466</guid>
		<description></description>
		<content:encoded><![CDATA[[subscribe2] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>466</wp:post_id>
		<wp:post_date>2012-03-29 09:39:00</wp:post_date>
		<wp:post_date_gmt>2012-03-29 09:39:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>subscribe</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>My Blog</title>
		<link>http://www.i4-apps.com/my-blog/</link>
		<pubDate>Thu, 29 Mar 2012 21:39:40 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.i4-apps.com/?page_id=486</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>486</wp:post_id>
		<wp:post_date>2012-03-29 21:39:40</wp:post_date>
		<wp:post_date_gmt>2012-03-29 21:39:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>my-blog</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>s2mail</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[showcase.php]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1333057400]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Assignment 3: required tasks</title>
		<link>http://www.i4-apps.com/assignment-3-required-tasks/</link>
		<pubDate>Tue, 03 Apr 2012 15:42:02 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.i4-apps.com/?p=507</guid>
		<description></description>
		<content:encoded><![CDATA[This post is the source code for my solution to the required tasks of the third assignment of the <a href="http://www.stanford.edu/class/cs193p/cgi-bin/drupal/" title="CS193p home page at Stanford University" target="_blank">Stanford University CS193p lecture series</a>. It took quite a lot bit longer than I expected to complete these tasks, but it is very satisfying to now have a first working app. Please let me know any questions, suggestions or other discussion you may have.

So, if you're still with the action ...
<!--more-->

I made a couple of straightforward updates to the CalculatorViewController to perform the segue, and implemented some new classes to enable the new graphing functionality.
</br>
To implement the segue, in the CalculatorViewController…..
</br>
<code lang="objc">
- (GraphViewController *)graphViewController {
	return [self.splitViewController.viewControllers lastObject];
}

- (IBAction)drawGraphPressed {
	
	if ([self graphViewController]) {
		[[self graphViewController] setProgram:self.brain.program];
	} else {
		[self performSegueWithIdentifier:@"ShowGraph" sender:self];
	}
}

- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
	[segue.destinationViewController setProgram:self.brain.program];
}
</code>
</br>
And the new GraphViewController…..
</br>
<code lang="objc">
#import <UIKit/UIKit.h>

@interface GraphViewController : UIViewController <UISplitViewControllerDelegate>

@property (nonatomic, strong) id program;

@end
</code>
<code lang="objc">
#import "GraphViewController.h"
#import "CalculatorBrain.h"
#import "GraphView.h"

@interface GraphViewController () <GraphViewDataSource>

@property (nonatomic, weak) IBOutlet GraphView *graphView;
@property (weak, nonatomic) IBOutlet UIToolbar *toolbar;

@end

@implementation GraphViewController

@synthesize program = _program;
@synthesize graphView = _graphView;
@synthesize toolbar = _toolbar;


- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil {
	self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
	// Synchronize the view with the model
	if (self) { }	
	return self;
}

- (void)awakeFromNib {
	[super awakeFromNib];
	self.splitViewController.delegate = self;
	self.splitViewController.presentsWithGesture = NO;	
}

- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation {
	return YES;
}

- (BOOL)splitViewController:(UISplitViewController *)svc 
	shouldHideViewController:(UIViewController *)vc 
				  inOrientation:(UIInterfaceOrientation)orientation {	
	// Only show the master controller in landscape mode
	return UIInterfaceOrientationIsPortrait(orientation);
}

- (void)splitViewController:(UISplitViewController *)svc 
	  willHideViewController:(UIViewController *)aViewController 
			 withBarButtonItem:(UIBarButtonItem *)barButtonItem 
		 forPopoverController:(UIPopoverController *)pc {
	
	// Show the bar button item on the toolbar
	barButtonItem.title = aViewController.title;
	
	// Add the button to the toolbar
	NSMutableArray *toolbarItems = [self.toolbar.items mutableCopy];
	[toolbarItems insertObject:barButtonItem atIndex:0];
	self.toolbar.items = toolbarItems;	
}

- (void) splitViewController:(UISplitViewController *)svc 
		willShowViewController:(UIViewController *)aViewController 
	invalidatingBarButtonItem:(UIBarButtonItem *)barButtonItem {
	
	// Hide the bar button item on the detail controller
	NSMutableArray *toolbarItems = [self.toolbar.items mutableCopy];
	[toolbarItems removeObject:barButtonItem];
	self.toolbar.items = toolbarItems;
}

- (void)refreshGraphViewProperties {

	// Need a program to recall scale and axis origin
	if (! self.program) return;
	
	// Need a graph view to set initial scale and axis origin
	if (! self.graphView) return;
	
	NSString *program = [CalculatorBrain descriptionOfProgram:self.program];
	
	// Retrieve the scale from storage
	float scale = [[NSUserDefaults standardUserDefaults] 
						floatForKey:[@"scale." stringByAppendingString:program]];	
	
	// Retrieve the x axis origin from storage
	float xAxisOrigin = [[NSUserDefaults standardUserDefaults] 
								floatForKey:[@"x." stringByAppendingString:program]];
	
	// Retrieve the y axis origin from storage
	float yAxisOrigin = [[NSUserDefaults standardUserDefaults]
								floatForKey:[@"y." stringByAppendingString:program]];
	
	// If we have scale in storage, then set this as the scale for the graph view
	if (scale) self.graphView.scale = scale;
	
	// If we have a value for the xAxisOrigin and yAxisOrigin then set it in the graph view
	if (xAxisOrigin && yAxisOrigin) {
		
		CGPoint axisOrigin;
		
		axisOrigin.x = xAxisOrigin;
		axisOrigin.y = yAxisOrigin;
		
		self.graphView.axisOrigin = axisOrigin;
	}
	
	// Refresh the graph View
	[self.graphView setNeedsDisplay];

}

- (void) setProgram:(id)program {
	
	_program = program;

	// We want to set the title of the controller if the program changes
	self.title = [NSString stringWithFormat:@"y = %@", 
					  [CalculatorBrain descriptionOfProgram:self.program]];
		
	// We want to update the graphView to set the starting values for the program. 
	//In iPhone mode this method is called as part of prepareSegue, at which point the graphView
	//is not available, and so the call shouldn't do anything.
	[self refreshGraphViewProperties];
} 


- (void) setGraphView:(GraphView *)graphView {
	_graphView = graphView;
	self.graphView.dataSource = self;
	
	// enable pinch gesture in the GraphView using pinch: handler
	[self.graphView addGestureRecognizer:[[UIPinchGestureRecognizer alloc] 
													  initWithTarget:self.graphView 
													  action:@selector(pinch:)]];

	// enable pan gesture in the GraphView using pan: handler
	[self.graphView addGestureRecognizer:[[UIPanGestureRecognizer alloc]
													  initWithTarget:self.graphView
													  action:@selector(pan:)]];
	
	// enable triple tap gesture in the GraphView using tripleTap: handler	
	UITapGestureRecognizer *tapGestureRecognizer = 
		[[UITapGestureRecognizer alloc] initWithTarget:self.graphView 
															 action:@selector(tripleTap:)];	
	tapGestureRecognizer.numberOfTapsRequired = 3;
	[self.graphView addGestureRecognizer:tapGestureRecognizer];	
	
	// We want to update the graphView to set the starting values for the program. In iPad mode 
	// this method is called before a program is set, in which case we don't want to do anything
	[self refreshGraphViewProperties];
}

- (void)storeScale:(float)scale ForGraphView:(GraphView *)sender {
	
	// Store the scale in user defaults
	[[NSUserDefaults standardUserDefaults] 
	 setFloat:scale forKey:[@"scale." stringByAppendingString:
									[CalculatorBrain descriptionOfProgram:self.program]]];	
	
	// Save the scale
	[[NSUserDefaults standardUserDefaults] synchronize];
}

- (void)storeAxisOriginX:(float)x andAxisOriginY:(float)y ForGraphView:(GraphView *)sender {
	
	
	NSString *program = [CalculatorBrain descriptionOfProgram:self.program];
	
	// Store the x axis origin in user defaults
	[[NSUserDefaults standardUserDefaults] setFloat:x 
														  forKey:[@"x." stringByAppendingString:program]];
	
	// Store the y axis origin in user defaults
	[[NSUserDefaults standardUserDefaults] setFloat:y 
														  forKey:[@"y." stringByAppendingString:program]];
	
	// Save the axis origin
	[[NSUserDefaults standardUserDefaults] synchronize];

}
	 
- (float)YValueForXValue:(float)xValue inGraphView:(GraphView *)sender {
	
	// Find the corresponding Y value by passing the x value to the calculator Brain
	id yValue = [CalculatorBrain runProgram:self.program usingVariableValues:
					 [NSDictionary dictionaryWithObject:[NSNumber numberWithFloat:xValue] 
														  forKey:@"x"]];

	return ((NSNumber *)yValue).floatValue;	
}


- (void)viewDidUnload {
	[self setToolbar:nil];
	[super viewDidUnload];
}
@end
</code>
</br>
And for the new GraphView...
</br>
<code lang="objc">
#import <UIKit/UIKit.h>

@class GraphView;

@protocol GraphViewDataSource
- (float)YValueForXValue:(float)xValue inGraphView:(GraphView *)sender;
- (void)storeScale:(float)scale ForGraphView: (GraphView *)sender;
- (void)storeAxisOriginX:(float)x andAxisOriginY:(float)y ForGraphView: (GraphView *)sender;

@end

@interface GraphView : UIView

@property(nonatomic, weak) IBOutlet id <GraphViewDataSource> dataSource;
@property(nonatomic) CGFloat scale;
@property(nonatomic) CGPoint axisOrigin;

@end
</code>

<code lang="objc">
#import "GraphView.h"
#import "AxesDrawer.h"

@implementation GraphView

@synthesize dataSource = _datasource;
@synthesize scale = _scale;
@synthesize axisOrigin = _axisOrigin;

#define DEFAULT_SCALE 100

- (id)initWithFrame:(CGRect)frame {
	self = [super initWithFrame:frame];
	if (self) {	}
	return self;
}

- (CGFloat)scale {
	
	// Set the scale to the default scale if none already
	if (!_scale) _scale = DEFAULT_SCALE;	

	return _scale; 
}

- (void)setScale:(CGFloat)scale {
	
	// Do nothing if the scale hasn't changed
	if (_scale == scale) return;
	
	_scale = scale;
	
	// Ask the delegate to store the scale
	[self.dataSource storeScale:_scale ForGraphView:self];

	// Redraw whenever the scale is changed
	[self setNeedsDisplay];
}


- (void)setAxisOrigin:(CGPoint)axisOrigin {
	
	// Do nothing is the axis origin hasn't changed
	if (_axisOrigin.x == axisOrigin.x && _axisOrigin.y == axisOrigin.y) return;
	
	_axisOrigin = axisOrigin;
	
	// Ask the delegate to store the scale
	[self.dataSource storeAxisOriginX:_axisOrigin.x 
							 andAxisOriginY:_axisOrigin.y 
								ForGraphView:self];
	 
	 // Redraw whenever the axis origin is changed
	[self setNeedsDisplay];
}

- (CGPoint)axisOrigin {
	
	// Set it to the middle of the graphBounds, if if the current origin is (0,0)
	if (!_axisOrigin.x && !_axisOrigin.y) { 
		_axisOrigin.x = (self.graphBounds.origin.x + self.graphBounds.size.width) / 2;
		_axisOrigin.y = (self.graphBounds.origin.y + self.graphBounds.size.height) / 2;
	}
	return _axisOrigin;
}

- (CGRect)graphBounds {
	// Let's just make it the size of the view to keep things simple
	return self.bounds;
}

- (CGPoint)convertToGraphCoordinateFromViewCoordinate:(CGPoint)coordinate {
	
	CGPoint graphCoordinate;	
	
	graphCoordinate.x = (coordinate.x - self.axisOrigin.x) / self.scale;
	graphCoordinate.y = (self.axisOrigin.y - coordinate.y) / self.scale;
		
	return graphCoordinate;
}

- (CGPoint) convertToViewCoordinateFromGraphCoordinate:(CGPoint)coordinate {
	
	CGPoint viewCoordinate;
	
	viewCoordinate.x = (coordinate.x * self.scale) + self.axisOrigin.x;
	viewCoordinate.y = self.axisOrigin.y - (coordinate.y * self.scale);
	
	return viewCoordinate;
}


- (void)drawRect:(CGRect)rect {
	
	CGContextRef context = UIGraphicsGetCurrentContext();
	
	// Set the line width and colour of the axis.
	CGContextSetLineWidth(context, 2.0);	
	CGContextSetStrokeColorWithColor(context, [[UIColor redColor]CGColor]);

	// Draw the axes using the AxesDrawer helper class.
	[AxesDrawer drawAxesInRect:self.graphBounds originAtPoint:self.axisOrigin scale:self.scale];
	
	// Set the line width and colour of the graph lines
	CGContextSetLineWidth(context, 1.0);	
	CGContextSetStrokeColorWithColor(context, [[UIColor blueColor]CGColor]);	

	CGContextBeginPath(context);
	
	CGFloat startingX = self.graphBounds.origin.x;	
	CGFloat endingX = self.graphBounds.origin.x + self.graphBounds.size.width;	
	CGFloat increment = 1/self.contentScaleFactor; // To enable iteration over pixels
	
	BOOL firstPoint = YES;
	
	// Iterate over the horizontal pixels, plotting the corresponding y values
	for (CGFloat x = startingX; x<= endingX; x+=increment) {		
		// Identify the starting X point for the curve and convert to graph coordinates.
		// Then retrieve the corresponding Y value and convert it back to view coordindates
		CGPoint coordinate;
		coordinate.x = x;
		coordinate = [self convertToGraphCoordinateFromViewCoordinate:coordinate];
		coordinate.y = [self.dataSource YValueForXValue:coordinate.x inGraphView:self];
		coordinate = [self convertToViewCoordinateFromGraphCoordinate:coordinate];
		coordinate.x = x;	
		
		// Handle the edge cases
		if (coordinate.y == NAN || coordinate.y == INFINITY || coordinate.y == -INFINITY) 
			continue;	
		
		if (firstPoint) { 
			CGContextMoveToPoint(context, coordinate.x, coordinate.y);
			firstPoint = NO;
		}
		
		CGContextAddLineToPoint(context, coordinate.x, coordinate.y);		

	}	
	CGContextStrokePath(context);
}

- (void)pinch:(UIPinchGestureRecognizer *)gesture {
	if ((gesture.state == UIGestureRecognizerStateChanged) || 
		 (gesture.state == UIGestureRecognizerStateEnded)) {

		// Adjust the scale and reset the gesture scale to 1
		self.scale *= gesture.scale;
		gesture.scale = 1;	
	}
}

- (void)pan:(UIPanGestureRecognizer *)gesture {
	if ((gesture.state == UIGestureRecognizerStateChanged) || 
		 (gesture.state == UIGestureRecognizerStateEnded)) {
		

		// Move the origin of the graph  
		CGPoint translation = [gesture translationInView:self];
	
		CGPoint axisOrigin;
		axisOrigin.x = self.axisOrigin.x + translation.x;
		axisOrigin.y = self.axisOrigin.y + translation.y;

		self.axisOrigin = axisOrigin;
		[gesture setTranslation:CGPointZero inView:self];			
	}
}

- (void)tripleTap:(UITapGestureRecognizer *)gesture {
	if (gesture.state == UIGestureRecognizerStateEnded) {
		self.axisOrigin = [gesture locationOfTouch:0 inView:self];
	}
}


@end
</code>
</br></br>
And that's it.. time to take a look at the extra credit tasks..


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>507</wp:post_id>
		<wp:post_date>2012-04-03 15:42:02</wp:post_date>
		<wp:post_date_gmt>2012-04-03 15:42:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>assignment-3-required-tasks</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="all-assignments"><![CDATA[All assignments]]></category>
		<category domain="post_tag" nicename="assignment-3"><![CDATA[assignment 3]]></category>
		<category domain="post_tag" nicename="cs193p"><![CDATA[CS193p]]></category>
		<category domain="post_tag" nicename="fall-2011"><![CDATA[fall 2011]]></category>
		<category domain="post_tag" nicename="graphing-calculator"><![CDATA[graphing calculator]]></category>
		<category domain="post_tag" nicename="stanford-university"><![CDATA[stanford university]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>s2mail</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>60</wp:comment_id>
			<wp:comment_author><![CDATA[mr curious]]></wp:comment_author>
			<wp:comment_author_email>woodydaniel@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>41.134.17.129</wp:comment_author_IP>
			<wp:comment_date>2012-04-10 14:23:05</wp:comment_date>
			<wp:comment_date_gmt>2012-04-10 14:23:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey,
I tried your modification if the seque code and ran it with the iPhone simulator. I noticed that I get a nested push animation (my prepareForSegue method gets called twice for some reason) use wanted to know of you came across this as well?

Thanks]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>61</wp:comment_id>
			<wp:comment_author><![CDATA[mr curious]]></wp:comment_author>
			<wp:comment_author_email>woodydaniel@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>41.134.17.129</wp:comment_author_IP>
			<wp:comment_date>2012-04-10 14:55:42</wp:comment_date>
			<wp:comment_date_gmt>2012-04-10 14:55:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Unless did you change anything in your storyboard re: the segue?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>60</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>72</wp:comment_id>
			<wp:comment_author><![CDATA[David Barton]]></wp:comment_author>
			<wp:comment_author_email>dave@i4-apps.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>82.69.106.161</wp:comment_author_IP>
			<wp:comment_date>2012-04-14 15:51:45</wp:comment_date>
			<wp:comment_date_gmt>2012-04-14 15:51:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi - I am not seeing this problem... I put at NSLog in the <em>prepareForSegue</em> method and I am only seeing one call when it segues from the Calculator to the Graph….]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>61</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>75</wp:comment_id>
			<wp:comment_author><![CDATA[mr curious]]></wp:comment_author>
			<wp:comment_author_email>woodydaniel@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>41.134.17.129</wp:comment_author_IP>
			<wp:comment_date>2012-04-16 09:49:49</wp:comment_date>
			<wp:comment_date_gmt>2012-04-16 09:49:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I found the problem. I was pushing the segue from the drawGraph button as opposed to the viewController.

Thanks for your help
Have a great day]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>72</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Assignment 3: extra credit</title>
		<link>http://www.i4-apps.com/assignment-3-extra-credit/</link>
		<pubDate>Wed, 04 Apr 2012 19:02:15 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.i4-apps.com/?p=546</guid>
		<description></description>
		<content:encoded><![CDATA[This covers the extra credit tasks of Assignment 3. I think this is pretty much it for the Calculator app, although I might look to jazz it up a little and put it on the app store at some point. Who knows? :-)

Let's get it finished…
<!--more-->
Hmm.. so how do we draw in dot mode? I tried a few different ways but in the end settled on using:

<code lang="objc">
// Draw in either dot mode or line
if (self.drawInDotMode) {
    CGContextMoveToPoint(context, coordinate.x, coordinate.y);
    // Use an Arc, with a small radius
    CGContextAddArc(context, coordinate.x, coordinate.y, 0.25, 0, 2*M_PI, YES);
} else {
    CGContextAddLineToPoint(context, coordinate.x, coordinate.y);
}
</code>

<em>self.drawInDotMode</em> is a new BOOL property that I use to determined the mode. Not sure about the radius of 0.25 - I did try using 1/self.contentScaleFactor, but the graph lines seemed to look a bit thick. Would be great to hear of any preferred alternatives.

Now all we need to do is to add a new switch to the <em>GraphView</em> and link this to a new action in the <em>GraphViewController</em>. For me, the implementation of the new action looks like this…

<code lang="objc">
- (IBAction)drawModeSwitched:(id)sender {
	self.graphView.drawInDotMode = [(UISwitch *)sender isOn];
	[self.graphView setNeedsDisplay];	
}
</code>

Not too tricky :-)

Tasks 3 requires playing around with the Time Profiler. There is a later tutorial on this, but I found it easy enough to just play around with it. I found an area in the CalculatorBrain eating up the CPU, in fact taking more time than actually doing the drawing. The original code looked like this:

<code lang="objc">
+ (BOOL)isNoOperandOperation:(NSString *)operation {
	// The set of operations requiring no operands
	NSSet * operationSet = [NSSet setWithObjects:@"?",nil];
	return [operationSet containsObject:operation];
}

+ (BOOL)isOneOperandOperation:(NSString *)operation {
	// The set of operations requiring one operands
	NSSet * operationSet = [NSSet setWithObjects:@"sin",@"cos",@"sqrt",@"±",nil];
	return [operationSet containsObject:operation];
}

+ (BOOL)isTwoOperandOperation:(NSString *)operation {
	// The set of operations requiring two operands
	NSSet * operationSet = [NSSet setWithObjects:@"+",@"-",@"*",@"/",nil];
	return [operationSet containsObject:operation];
}

+ (BOOL)isOperation:(NSString *)operation {	
	
	// Check to see if it's in any of our operation sets
	return 
	[self isNoOperandOperation:operation] ||
	[self isOneOperandOperation:operation]||
	[self isTwoOperandOperation:operation];
}
</code>

These methods are being called each time a program is run. The repeated set manipulation is unnecessary, as the queries don't change on an instance by instance basis. So with a new static NSDictionary to store operandCounts and a bit of refactoring...

<code lang="objc">
+ (NSDictionary *)operandCounts {
	if (OPERAND_COUNTS == nil) {
		OPERAND_COUNTS = [NSDictionary dictionaryWithObjectsAndKeys: 
								[NSNumber numberWithInt:0], @"?", 
								[NSNumber numberWithInt:1], @"sin",
								[NSNumber numberWithInt:1], @"cos", 
								[NSNumber numberWithInt:1], @"sqrt",
								[NSNumber numberWithInt:1], @"±", 
								[NSNumber numberWithInt:2], @"+", 
								[NSNumber numberWithInt:2], @"-", 
								[NSNumber numberWithInt:2], @"*", 
								[NSNumber numberWithInt:2], @"/", nil];
	}
	return OPERAND_COUNTS;
}

+ (BOOL)isNoOperandOperation:(NSString *)operation {
	
	return [[self operandCounts] objectForKey:operation] == [NSNumber numberWithInt:0];
}

+ (BOOL)isOneOperandOperation:(NSString *)operation {
	
	return [[self operandCounts] objectForKey:operation] == [NSNumber numberWithInt:1];
}

+ (BOOL)isTwoOperandOperation:(NSString *)operation {
	
	return [[self operandCounts] objectForKey:operation] == [NSNumber numberWithInt:2];
}

+ (BOOL)isOperation:(NSString *)operation {	
	
	// Check to see if it's in the operandCounts dictionary
	return [[self operandCounts] objectForKey:operation] != nil;
}
</code>

Much better… and the performance improved nicely :-)
</br></br>
So, that's about it for assignment 3 and the calculator tasks. Hope these posts have been of some use and I'm happy to discuss any aspect of these solutions in more detail, so feel free to leave a comment or drop me an email.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>546</wp:post_id>
		<wp:post_date>2012-04-04 19:02:15</wp:post_date>
		<wp:post_date_gmt>2012-04-04 19:02:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>assignment-3-extra-credit</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="all-assignments"><![CDATA[All assignments]]></category>
		<category domain="post_tag" nicename="assignment-3"><![CDATA[assignment 3]]></category>
		<category domain="post_tag" nicename="calculator"><![CDATA[calculator]]></category>
		<category domain="post_tag" nicename="cs193p"><![CDATA[CS193p]]></category>
		<category domain="post_tag" nicename="fall-2011"><![CDATA[fall 2011]]></category>
		<category domain="post_tag" nicename="stanford-university"><![CDATA[stanford university]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>s2mail</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>52</wp:comment_id>
			<wp:comment_author><![CDATA[Dave K]]></wp:comment_author>
			<wp:comment_author_email>dave.kliman@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>24.47.137.6</wp:comment_author_IP>
			<wp:comment_date>2012-04-06 12:37:53</wp:comment_date>
			<wp:comment_date_gmt>2012-04-06 12:37:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I had originally done something like your operand counts dictionary, so what was slow for me was the drawing, actually... and i haven't really addressed that part of the assignment yet... incidentally i'm wondering if drawing arcs for each pixel isn't quite time consuming compared to some other operation that might be easier... unless arcs are drawn with bill atkinson's variation on that bresenham algorthm, where it's all done using only i think addition...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>53</wp:comment_id>
			<wp:comment_author><![CDATA[David Barton]]></wp:comment_author>
			<wp:comment_author_email>dave@i4-apps.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>82.69.106.161</wp:comment_author_IP>
			<wp:comment_date>2012-04-06 13:11:40</wp:comment_date>
			<wp:comment_date_gmt>2012-04-06 13:11:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yes, it does look like drawing arcs is relatively time consuming. I've replaced the Arc drawing with this:
<code lang="objc">
CGContextAddLineToPoint(context, 
						coordinate.x - 1/self.contentScaleFactor, 
						coordinate.y - 1/self.contentScaleFactor);
</code>
… and performance is now comparable in both modes.

Thanks for highlighting that.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>52</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Gotcha! NAN and INFINITY</title>
		<link>http://www.i4-apps.com/nan-and-infinity/</link>
		<pubDate>Thu, 05 Apr 2012 17:20:10 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.i4-apps.com/?p=564</guid>
		<description></description>
		<content:encoded><![CDATA[As an iOS noob, schoolboy errors are pretty much par for the course. Here's a little gotcha! (it got me certainly :-)), that I could see appearing as part of a 'little bit too tricky technical interview'….
<!--more-->
<code lang="objc">
	if (NAN==NAN) NSLog(@"NAN does equal NAN");
	else NSLog(@"NAN does not equal NAN");
		
	if (INFINITY==INFINITY) NSLog(@"INFINITY does equal INFINITY");
	else NSLog(@"INFINITY does not equal INFINITY");
	
	if (-INFINITY==INFINITY) NSLog(@"-INFINITY does equal +INFINITY");
	else NSLog(@"-INFINITY does not equal +INFINITY");
	

	if isnan(NAN) NSLog(@"isnan NAN? Yes it is!");
	else NSLog(@"isnan NAN? No it isn't!");
	
	if isinf(INFINITY) NSLog(@"isinf INFINITY? Yes it is!");
	else NSLog(@"isinf INFINITY? No it isn't!");	
	
	if isinf(-INFINITY) NSLog(@"isinf -INFINITY? Yes it is!");
	else NSLog(@"isinf -INFINITY? No it isn't!");		
</code>
And the results… 

NAN does not equal NAN
INFINITY does equal INFINITY
-INFINITY does not equal +INFINITY
isnan NAN? Yes it is!
isinf INFINITY? Yes it is!
isinf -INFINITY? Yes it is!

So there we go… the explanation isn't entirely clear to me, but it does seems that the general rule is to always use isnan or isinf when testing for NAN or INFINITY!

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>564</wp:post_id>
		<wp:post_date>2012-04-05 17:20:10</wp:post_date>
		<wp:post_date_gmt>2012-04-05 17:20:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nan-and-infinity</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="general-ios"><![CDATA[General iOS]]></category>
		<category domain="post_tag" nicename="infinity"><![CDATA[INFINITY]]></category>
		<category domain="post_tag" nicename="ios"><![CDATA[iOS]]></category>
		<category domain="post_tag" nicename="isinf"><![CDATA[isinf]]></category>
		<category domain="post_tag" nicename="isnan"><![CDATA[isnan]]></category>
		<category domain="post_tag" nicename="nan"><![CDATA[NAN]]></category>
		<category domain="post_tag" nicename="objective-c"><![CDATA[objective c]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>s2mail</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SplitViewController Popovers</title>
		<link>http://www.i4-apps.com/splitviewcontroller-popovers/</link>
		<pubDate>Fri, 06 Apr 2012 17:00:57 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.i4-apps.com/?p=583</guid>
		<description></description>
		<content:encoded><![CDATA[I've been working my way through the excellent Stanford University <a title="iPad and iPhone Application Development (HD) by Paul Hegarty (Fall 2011)" href="http://itunes.apple.com/itunes-u/ipad-iphone-application-development/id473757255" target="_blank">CS193p lectures</a> taught by Paul Hegarty and available through iTunes U. Lecture 7 describes and demos how to use a UISplitViewController, and a technique in which a bar button shows the 'Master View' in a pretty popover window whenever the iPad is in portrait mode. 

For me though, it doesn't work like that. The bar button slides a non-popover version of the Master View into the left side of the screen and no pretty popover appears. Frankly, it's ugly ... but I think there is a workaround to get things looking how they should :-)
<!--more-->
A bit of searching around the internet and, unsurprisingly, I'm not the first person to run into this. This <a href="http://www.picapod.com/2012/03/28/ipad-popovers/" title="iPad popovers" target="_blank">post</a> describes and shows the issue quite nicely. The problem seems to be a new feature of iOS 5.1!

So … how do we get things looking like they were before? This may be one solution:

1. ctrl-drag from your DetailViewController to your MasterViewController. Select Popover as the Storyboard segue. Set an appropriate identifier for the segue in the Attributes Inspector.

2. The bar button item is placed programmatically and so doesn't appear in the storyboard. This means you can't drag the Anchor attribute to the item to which you want to anchor the Popover. This anchoring should (and probably can) be done programmatically but an alternative, albeit cheap and dirty!, is to create a 'no-text' label at the place where the bar button appears, and anchor from this instead. If anyone knows a better way, please let me know :-).

3. Add the highlighted lines to the following SplitViewController delegate method:
<code lang="objc" highlight="9,10">
- (void)splitViewController:(UISplitViewController *)svc 
	  willHideViewController:(UIViewController *)aViewController 
			 withBarButtonItem:(UIBarButtonItem *)barButtonItem 
		 forPopoverController:(UIPopoverController *)pc {
	
	// Show the bar button item on the toolbar
	barButtonItem.title = aViewController.title;
	
	barButtonItem.target = self;
	barButtonItem.action = @selector(barButtonPressed);
	
	// Add the button to the toolbar
	NSMutableArray *toolbarItems = [self.toolbar.items mutableCopy];
	[toolbarItems insertObject:barButtonItem atIndex:0];
	self.toolbar.items = toolbarItems;	
}
</code>
This seems to override what happens when the user presses the bar button item, instead calling the <em>barButtonPressed</em> defined in the current class. The implementation of <em>barButtonPressed</em> just performs the segue created in step 1.
<code lang="objc">
- (void)barButtonPressed {
		[self performSegueWithIdentifier:@"ShowCalculator" sender:self];	
}
</code>

So far so good… the Popover displays nicely. However, given that the Popover presents an instance of the MasterViewController, for a lot of apps the likelihood is that things you do in the Popover will change stuff in the Detail View. As a Popover, the instance of the Controller is not part of the SplitViewController, so getting a handle to the DetailViewController using <em>[self.splitViewController.viewControllers lastObject]</em> isn't going to cut it. We need to make sure things are still wired up for the case where our Master View is also presented in Popover mode.

4. Create a new protocol describing a delegate for the MasterViewController class. Also define a new public property in the MasterViewController that enables it to access the delegate. My MasterViewController header now looks like this.

<code lang="objc" highlight="4,5,6,14">
#import <UIKit/UIKit.h>
#import "CalculatorBrain.h"

@protocol MasterViewControllerPopoverDelegate 
@property (weak, nonatomic) id masterViewController;
@end

@interface CalculatorViewController : UIViewController

@property (weak, nonatomic) IBOutlet UILabel *display;
@property (weak, nonatomic) IBOutlet UILabel *calculation;
@property (weak, nonatomic) IBOutlet UILabel *variables;

@property (weak, nonatomic) id<MasterViewControllerPopoverDelegate> popoverDelegate;

@end
</code>

So, whenever the Popover wants to message the DetailViewController it can do so through the <em>popoverDelegate</em>. We need to change our code where appropriate so that calls that currently access the MasterViewController via SplitViewController are 'Popover aware'. This is what I did in my MasterViewController class (<em>GraphViewController</em> is my DetailViewController class).

<code lang="objc">
- (GraphViewController *)graphViewController {
	return self.popoverDelegate ? 
		self.popoverDelegate :[self.splitViewController.viewControllers lastObject];
}
</code>

Setting the delegate is done in the DetailViewController class, during <em>prepareForSegue</em>, so it is only in Popover mode where an instance of the MasterViewController class has a delegate that is not nil.

<code lang="objc" highlight="2">
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
	[segue.destinationViewController setPopoverDelegate:self];	
	self.popover = ((UIStoryboardPopoverSegue *)segue).popoverController;
}
</code>

5. The <em>masterViewController</em> property in the protocol above is used to enable the Popover to access data in the MasterViewController. It is to ensure that the data stored in the Popover instance is the same as the data stored in the MasterViewController instance. To implement this we need to ensure that the MasterViewController is the master of the model, and makes sure that the Popover uses this model rather than creating it's own. I've only got one model variable in my MasterViewController class and so for me it looks like this - with the highlighted rows being the new addition.

<code lang="objc" highlight="2">
- (CalculatorBrain *)brain {
	if (self.popoverDelegate) _brain = [[self.popoverDelegate masterViewController] brain];
	if (!_brain) _brain = [[CalculatorBrain alloc] init];
	return _brain;
}
</code>

The DetailViewController implements the protocol. We only need to synthesise the <em>masterViewController</em> and then override the get method to ensure that the Popover can source it's data from the MasterViewController instance.
<code lang="objc">
- (id)masterViewController {
	return [self.splitViewController.viewControllers objectAtIndex:0];	
}
</code>

… oh and we also need to update the popover/MasterViewController view to ensure that it is always synced with the model. It seems to me that the best place to do this is <em>viewDidAppear</em>.

6. Finally we should to ensure that the Popover dismisses when the orientation changes from portrait to landscape. To do this, create a pointer to the popover controller that the segue creates.
<code lang="objc" highlight="3">
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
	[segue.destinationViewController setPopoverDelegate:self];	
	self.popover = ((UIStoryboardPopoverSegue *)segue).popoverController;
}
</code>
And then when the orientation changes to landscape and the MasterViewController gets shown, we can dismiss the Popover.
<code lang="objc" highlight="10">
- (void) splitViewController:(UISplitViewController *)svc 
		willShowViewController:(UIViewController *)aViewController 
	invalidatingBarButtonItem:(UIBarButtonItem *)barButtonItem {
	
	// Hide the bar button item on the detail controller
	NSMutableArray *toolbarItems = [self.toolbar.items mutableCopy];
	[toolbarItems removeObject:barButtonItem];
	self.toolbar.items = toolbarItems;
	
	if (self.popover) [self.popover dismissPopoverAnimated:YES];
}
</code>
Oh, it seems as if clicking the bar button when the popover is displayed will dismiss it. I don't think it did this before, so a bonus maybe. :-)

And that's it I think. Quite a bit of fuss really, but it seems to work .... 

P.S. As an aside, I did try for ages to create and manage a Popover programmatically, instead of segueing. Creating a Popover using the MasterViewController as the ContentViewController and then displaying it using <em>presentPopoverFromBarButtonItem: permittedArrowDirections: animated:</em> worked as expected, but I just couldn't seem to get <em>dismissPopoverAnimated</em> to cleanly drop the Popover whenever the orientation changed to landscape. It seems like a bug to me. If it had worked, it would be a far far simpler method with just a few lines of code!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>583</wp:post_id>
		<wp:post_date>2012-04-06 17:00:57</wp:post_date>
		<wp:post_date_gmt>2012-04-06 17:00:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>splitviewcontroller-popovers</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="bar-button-item"><![CDATA[bar button item]]></category>
		<category domain="category" nicename="general-ios"><![CDATA[General iOS]]></category>
		<category domain="post_tag" nicename="ios-5-1"><![CDATA[iOS 5.1]]></category>
		<category domain="post_tag" nicename="popovers"><![CDATA[popovers]]></category>
		<category domain="post_tag" nicename="uisplitviewcontroller"><![CDATA[UISplitViewController]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>s2mail</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[uisplitviewcontroller-popovers-ios-51]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[uisplitviewcontroller-popovers]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
